
ultrasonic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a40  08000190  08000190  00001190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003bd0  08003bd0  00004bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c18  08003c18  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003c18  08003c18  00004c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c20  08003c20  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c20  08003c20  00004c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c24  08003c24  00004c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003c28  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000000c  08003c34  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08003c34  00005110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f153  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e5e  00000000  00000000  0001418f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  00015ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b61  00000000  00000000  00016e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fe54  00000000  00000000  000179d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001018e  00000000  00000000  0003782d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c5bf3  00000000  00000000  000479bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010d5ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e5c  00000000  00000000  0010d5f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00111450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003bb8 	.word	0x08003bb8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000010 	.word	0x20000010
 80001cc:	08003bb8 	.word	0x08003bb8

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	@ 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2uiz>:
 800096c:	004a      	lsls	r2, r1, #1
 800096e:	d211      	bcs.n	8000994 <__aeabi_d2uiz+0x28>
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000974:	d211      	bcs.n	800099a <__aeabi_d2uiz+0x2e>
 8000976:	d50d      	bpl.n	8000994 <__aeabi_d2uiz+0x28>
 8000978:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d40e      	bmi.n	80009a0 <__aeabi_d2uiz+0x34>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	fa23 f002 	lsr.w	r0, r3, r2
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d102      	bne.n	80009a6 <__aeabi_d2uiz+0x3a>
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	4770      	bx	lr
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	4770      	bx	lr

080009ac <__aeabi_uldivmod>:
 80009ac:	b953      	cbnz	r3, 80009c4 <__aeabi_uldivmod+0x18>
 80009ae:	b94a      	cbnz	r2, 80009c4 <__aeabi_uldivmod+0x18>
 80009b0:	2900      	cmp	r1, #0
 80009b2:	bf08      	it	eq
 80009b4:	2800      	cmpeq	r0, #0
 80009b6:	bf1c      	itt	ne
 80009b8:	f04f 31ff 	movne.w	r1, #4294967295
 80009bc:	f04f 30ff 	movne.w	r0, #4294967295
 80009c0:	f000 b988 	b.w	8000cd4 <__aeabi_idiv0>
 80009c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009cc:	f000 f806 	bl	80009dc <__udivmoddi4>
 80009d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d8:	b004      	add	sp, #16
 80009da:	4770      	bx	lr

080009dc <__udivmoddi4>:
 80009dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e0:	9d08      	ldr	r5, [sp, #32]
 80009e2:	468e      	mov	lr, r1
 80009e4:	4604      	mov	r4, r0
 80009e6:	4688      	mov	r8, r1
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d14a      	bne.n	8000a82 <__udivmoddi4+0xa6>
 80009ec:	428a      	cmp	r2, r1
 80009ee:	4617      	mov	r7, r2
 80009f0:	d962      	bls.n	8000ab8 <__udivmoddi4+0xdc>
 80009f2:	fab2 f682 	clz	r6, r2
 80009f6:	b14e      	cbz	r6, 8000a0c <__udivmoddi4+0x30>
 80009f8:	f1c6 0320 	rsb	r3, r6, #32
 80009fc:	fa01 f806 	lsl.w	r8, r1, r6
 8000a00:	fa20 f303 	lsr.w	r3, r0, r3
 8000a04:	40b7      	lsls	r7, r6
 8000a06:	ea43 0808 	orr.w	r8, r3, r8
 8000a0a:	40b4      	lsls	r4, r6
 8000a0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a10:	fa1f fc87 	uxth.w	ip, r7
 8000a14:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a18:	0c23      	lsrs	r3, r4, #16
 8000a1a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a22:	fb01 f20c 	mul.w	r2, r1, ip
 8000a26:	429a      	cmp	r2, r3
 8000a28:	d909      	bls.n	8000a3e <__udivmoddi4+0x62>
 8000a2a:	18fb      	adds	r3, r7, r3
 8000a2c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000a30:	f080 80ea 	bcs.w	8000c08 <__udivmoddi4+0x22c>
 8000a34:	429a      	cmp	r2, r3
 8000a36:	f240 80e7 	bls.w	8000c08 <__udivmoddi4+0x22c>
 8000a3a:	3902      	subs	r1, #2
 8000a3c:	443b      	add	r3, r7
 8000a3e:	1a9a      	subs	r2, r3, r2
 8000a40:	b2a3      	uxth	r3, r4
 8000a42:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a46:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a4e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a52:	459c      	cmp	ip, r3
 8000a54:	d909      	bls.n	8000a6a <__udivmoddi4+0x8e>
 8000a56:	18fb      	adds	r3, r7, r3
 8000a58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a5c:	f080 80d6 	bcs.w	8000c0c <__udivmoddi4+0x230>
 8000a60:	459c      	cmp	ip, r3
 8000a62:	f240 80d3 	bls.w	8000c0c <__udivmoddi4+0x230>
 8000a66:	443b      	add	r3, r7
 8000a68:	3802      	subs	r0, #2
 8000a6a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a6e:	eba3 030c 	sub.w	r3, r3, ip
 8000a72:	2100      	movs	r1, #0
 8000a74:	b11d      	cbz	r5, 8000a7e <__udivmoddi4+0xa2>
 8000a76:	40f3      	lsrs	r3, r6
 8000a78:	2200      	movs	r2, #0
 8000a7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a82:	428b      	cmp	r3, r1
 8000a84:	d905      	bls.n	8000a92 <__udivmoddi4+0xb6>
 8000a86:	b10d      	cbz	r5, 8000a8c <__udivmoddi4+0xb0>
 8000a88:	e9c5 0100 	strd	r0, r1, [r5]
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4608      	mov	r0, r1
 8000a90:	e7f5      	b.n	8000a7e <__udivmoddi4+0xa2>
 8000a92:	fab3 f183 	clz	r1, r3
 8000a96:	2900      	cmp	r1, #0
 8000a98:	d146      	bne.n	8000b28 <__udivmoddi4+0x14c>
 8000a9a:	4573      	cmp	r3, lr
 8000a9c:	d302      	bcc.n	8000aa4 <__udivmoddi4+0xc8>
 8000a9e:	4282      	cmp	r2, r0
 8000aa0:	f200 8105 	bhi.w	8000cae <__udivmoddi4+0x2d2>
 8000aa4:	1a84      	subs	r4, r0, r2
 8000aa6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000aaa:	2001      	movs	r0, #1
 8000aac:	4690      	mov	r8, r2
 8000aae:	2d00      	cmp	r5, #0
 8000ab0:	d0e5      	beq.n	8000a7e <__udivmoddi4+0xa2>
 8000ab2:	e9c5 4800 	strd	r4, r8, [r5]
 8000ab6:	e7e2      	b.n	8000a7e <__udivmoddi4+0xa2>
 8000ab8:	2a00      	cmp	r2, #0
 8000aba:	f000 8090 	beq.w	8000bde <__udivmoddi4+0x202>
 8000abe:	fab2 f682 	clz	r6, r2
 8000ac2:	2e00      	cmp	r6, #0
 8000ac4:	f040 80a4 	bne.w	8000c10 <__udivmoddi4+0x234>
 8000ac8:	1a8a      	subs	r2, r1, r2
 8000aca:	0c03      	lsrs	r3, r0, #16
 8000acc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ad0:	b280      	uxth	r0, r0
 8000ad2:	b2bc      	uxth	r4, r7
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ada:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ade:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ae2:	fb04 f20c 	mul.w	r2, r4, ip
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d907      	bls.n	8000afa <__udivmoddi4+0x11e>
 8000aea:	18fb      	adds	r3, r7, r3
 8000aec:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000af0:	d202      	bcs.n	8000af8 <__udivmoddi4+0x11c>
 8000af2:	429a      	cmp	r2, r3
 8000af4:	f200 80e0 	bhi.w	8000cb8 <__udivmoddi4+0x2dc>
 8000af8:	46c4      	mov	ip, r8
 8000afa:	1a9b      	subs	r3, r3, r2
 8000afc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000b00:	fb0e 3312 	mls	r3, lr, r2, r3
 8000b04:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000b08:	fb02 f404 	mul.w	r4, r2, r4
 8000b0c:	429c      	cmp	r4, r3
 8000b0e:	d907      	bls.n	8000b20 <__udivmoddi4+0x144>
 8000b10:	18fb      	adds	r3, r7, r3
 8000b12:	f102 30ff 	add.w	r0, r2, #4294967295
 8000b16:	d202      	bcs.n	8000b1e <__udivmoddi4+0x142>
 8000b18:	429c      	cmp	r4, r3
 8000b1a:	f200 80ca 	bhi.w	8000cb2 <__udivmoddi4+0x2d6>
 8000b1e:	4602      	mov	r2, r0
 8000b20:	1b1b      	subs	r3, r3, r4
 8000b22:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b26:	e7a5      	b.n	8000a74 <__udivmoddi4+0x98>
 8000b28:	f1c1 0620 	rsb	r6, r1, #32
 8000b2c:	408b      	lsls	r3, r1
 8000b2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000b32:	431f      	orrs	r7, r3
 8000b34:	fa0e f401 	lsl.w	r4, lr, r1
 8000b38:	fa20 f306 	lsr.w	r3, r0, r6
 8000b3c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000b40:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000b44:	4323      	orrs	r3, r4
 8000b46:	fa00 f801 	lsl.w	r8, r0, r1
 8000b4a:	fa1f fc87 	uxth.w	ip, r7
 8000b4e:	fbbe f0f9 	udiv	r0, lr, r9
 8000b52:	0c1c      	lsrs	r4, r3, #16
 8000b54:	fb09 ee10 	mls	lr, r9, r0, lr
 8000b58:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000b5c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000b60:	45a6      	cmp	lr, r4
 8000b62:	fa02 f201 	lsl.w	r2, r2, r1
 8000b66:	d909      	bls.n	8000b7c <__udivmoddi4+0x1a0>
 8000b68:	193c      	adds	r4, r7, r4
 8000b6a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000b6e:	f080 809c 	bcs.w	8000caa <__udivmoddi4+0x2ce>
 8000b72:	45a6      	cmp	lr, r4
 8000b74:	f240 8099 	bls.w	8000caa <__udivmoddi4+0x2ce>
 8000b78:	3802      	subs	r0, #2
 8000b7a:	443c      	add	r4, r7
 8000b7c:	eba4 040e 	sub.w	r4, r4, lr
 8000b80:	fa1f fe83 	uxth.w	lr, r3
 8000b84:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b88:	fb09 4413 	mls	r4, r9, r3, r4
 8000b8c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000b90:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b94:	45a4      	cmp	ip, r4
 8000b96:	d908      	bls.n	8000baa <__udivmoddi4+0x1ce>
 8000b98:	193c      	adds	r4, r7, r4
 8000b9a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000b9e:	f080 8082 	bcs.w	8000ca6 <__udivmoddi4+0x2ca>
 8000ba2:	45a4      	cmp	ip, r4
 8000ba4:	d97f      	bls.n	8000ca6 <__udivmoddi4+0x2ca>
 8000ba6:	3b02      	subs	r3, #2
 8000ba8:	443c      	add	r4, r7
 8000baa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000bae:	eba4 040c 	sub.w	r4, r4, ip
 8000bb2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000bb6:	4564      	cmp	r4, ip
 8000bb8:	4673      	mov	r3, lr
 8000bba:	46e1      	mov	r9, ip
 8000bbc:	d362      	bcc.n	8000c84 <__udivmoddi4+0x2a8>
 8000bbe:	d05f      	beq.n	8000c80 <__udivmoddi4+0x2a4>
 8000bc0:	b15d      	cbz	r5, 8000bda <__udivmoddi4+0x1fe>
 8000bc2:	ebb8 0203 	subs.w	r2, r8, r3
 8000bc6:	eb64 0409 	sbc.w	r4, r4, r9
 8000bca:	fa04 f606 	lsl.w	r6, r4, r6
 8000bce:	fa22 f301 	lsr.w	r3, r2, r1
 8000bd2:	431e      	orrs	r6, r3
 8000bd4:	40cc      	lsrs	r4, r1
 8000bd6:	e9c5 6400 	strd	r6, r4, [r5]
 8000bda:	2100      	movs	r1, #0
 8000bdc:	e74f      	b.n	8000a7e <__udivmoddi4+0xa2>
 8000bde:	fbb1 fcf2 	udiv	ip, r1, r2
 8000be2:	0c01      	lsrs	r1, r0, #16
 8000be4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000be8:	b280      	uxth	r0, r0
 8000bea:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000bee:	463b      	mov	r3, r7
 8000bf0:	4638      	mov	r0, r7
 8000bf2:	463c      	mov	r4, r7
 8000bf4:	46b8      	mov	r8, r7
 8000bf6:	46be      	mov	lr, r7
 8000bf8:	2620      	movs	r6, #32
 8000bfa:	fbb1 f1f7 	udiv	r1, r1, r7
 8000bfe:	eba2 0208 	sub.w	r2, r2, r8
 8000c02:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c06:	e766      	b.n	8000ad6 <__udivmoddi4+0xfa>
 8000c08:	4601      	mov	r1, r0
 8000c0a:	e718      	b.n	8000a3e <__udivmoddi4+0x62>
 8000c0c:	4610      	mov	r0, r2
 8000c0e:	e72c      	b.n	8000a6a <__udivmoddi4+0x8e>
 8000c10:	f1c6 0220 	rsb	r2, r6, #32
 8000c14:	fa2e f302 	lsr.w	r3, lr, r2
 8000c18:	40b7      	lsls	r7, r6
 8000c1a:	40b1      	lsls	r1, r6
 8000c1c:	fa20 f202 	lsr.w	r2, r0, r2
 8000c20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c24:	430a      	orrs	r2, r1
 8000c26:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c2a:	b2bc      	uxth	r4, r7
 8000c2c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c30:	0c11      	lsrs	r1, r2, #16
 8000c32:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c36:	fb08 f904 	mul.w	r9, r8, r4
 8000c3a:	40b0      	lsls	r0, r6
 8000c3c:	4589      	cmp	r9, r1
 8000c3e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000c42:	b280      	uxth	r0, r0
 8000c44:	d93e      	bls.n	8000cc4 <__udivmoddi4+0x2e8>
 8000c46:	1879      	adds	r1, r7, r1
 8000c48:	f108 3cff 	add.w	ip, r8, #4294967295
 8000c4c:	d201      	bcs.n	8000c52 <__udivmoddi4+0x276>
 8000c4e:	4589      	cmp	r9, r1
 8000c50:	d81f      	bhi.n	8000c92 <__udivmoddi4+0x2b6>
 8000c52:	eba1 0109 	sub.w	r1, r1, r9
 8000c56:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c5a:	fb09 f804 	mul.w	r8, r9, r4
 8000c5e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c62:	b292      	uxth	r2, r2
 8000c64:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c68:	4542      	cmp	r2, r8
 8000c6a:	d229      	bcs.n	8000cc0 <__udivmoddi4+0x2e4>
 8000c6c:	18ba      	adds	r2, r7, r2
 8000c6e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000c72:	d2c4      	bcs.n	8000bfe <__udivmoddi4+0x222>
 8000c74:	4542      	cmp	r2, r8
 8000c76:	d2c2      	bcs.n	8000bfe <__udivmoddi4+0x222>
 8000c78:	f1a9 0102 	sub.w	r1, r9, #2
 8000c7c:	443a      	add	r2, r7
 8000c7e:	e7be      	b.n	8000bfe <__udivmoddi4+0x222>
 8000c80:	45f0      	cmp	r8, lr
 8000c82:	d29d      	bcs.n	8000bc0 <__udivmoddi4+0x1e4>
 8000c84:	ebbe 0302 	subs.w	r3, lr, r2
 8000c88:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000c8c:	3801      	subs	r0, #1
 8000c8e:	46e1      	mov	r9, ip
 8000c90:	e796      	b.n	8000bc0 <__udivmoddi4+0x1e4>
 8000c92:	eba7 0909 	sub.w	r9, r7, r9
 8000c96:	4449      	add	r1, r9
 8000c98:	f1a8 0c02 	sub.w	ip, r8, #2
 8000c9c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ca0:	fb09 f804 	mul.w	r8, r9, r4
 8000ca4:	e7db      	b.n	8000c5e <__udivmoddi4+0x282>
 8000ca6:	4673      	mov	r3, lr
 8000ca8:	e77f      	b.n	8000baa <__udivmoddi4+0x1ce>
 8000caa:	4650      	mov	r0, sl
 8000cac:	e766      	b.n	8000b7c <__udivmoddi4+0x1a0>
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e6fd      	b.n	8000aae <__udivmoddi4+0xd2>
 8000cb2:	443b      	add	r3, r7
 8000cb4:	3a02      	subs	r2, #2
 8000cb6:	e733      	b.n	8000b20 <__udivmoddi4+0x144>
 8000cb8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cbc:	443b      	add	r3, r7
 8000cbe:	e71c      	b.n	8000afa <__udivmoddi4+0x11e>
 8000cc0:	4649      	mov	r1, r9
 8000cc2:	e79c      	b.n	8000bfe <__udivmoddi4+0x222>
 8000cc4:	eba1 0109 	sub.w	r1, r1, r9
 8000cc8:	46c4      	mov	ip, r8
 8000cca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cce:	fb09 f804 	mul.w	r8, r9, r4
 8000cd2:	e7c4      	b.n	8000c5e <__udivmoddi4+0x282>

08000cd4 <__aeabi_idiv0>:
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd8:	b598      	push	{r3, r4, r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cdc:	f000 fb0f 	bl	80012fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ce0:	f000 f898 	bl	8000e14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ce4:	f000 f97c 	bl	8000fe0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ce8:	f000 f94a 	bl	8000f80 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000cec:	f000 f8f4 	bl	8000ed8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000cf0:	4843      	ldr	r0, [pc, #268]	@ (8000e00 <main+0x128>)
 8000cf2:	f002 f819 	bl	8002d28 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cfc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d00:	f000 fdfe 	bl	8001900 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000d04:	2201      	movs	r2, #1
 8000d06:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d0e:	f000 fdf7 	bl	8001900 <HAL_GPIO_WritePin>
	  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000d12:	4b3b      	ldr	r3, [pc, #236]	@ (8000e00 <main+0x128>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2200      	movs	r2, #0
 8000d18:	625a      	str	r2, [r3, #36]	@ 0x24
	  while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 8000d1a:	bf00      	nop
 8000d1c:	4b38      	ldr	r3, [pc, #224]	@ (8000e00 <main+0x128>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d22:	2b09      	cmp	r3, #9
 8000d24:	d9fa      	bls.n	8000d1c <main+0x44>
	  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000d26:	2200      	movs	r2, #0
 8000d28:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d30:	f000 fde6 	bl	8001900 <HAL_GPIO_WritePin>

	  pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8000d34:	f000 fb4c 	bl	80013d0 <HAL_GetTick>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	4a32      	ldr	r2, [pc, #200]	@ (8000e04 <main+0x12c>)
 8000d3c:	6013      	str	r3, [r2, #0]
	  // wait for the echo pin to go high
	  while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 8000d3e:	bf00      	nop
 8000d40:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d48:	f000 fdc2 	bl	80018d0 <HAL_GPIO_ReadPin>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d108      	bne.n	8000d64 <main+0x8c>
 8000d52:	4b2c      	ldr	r3, [pc, #176]	@ (8000e04 <main+0x12c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f103 040a 	add.w	r4, r3, #10
 8000d5a:	f000 fb39 	bl	80013d0 <HAL_GetTick>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	429c      	cmp	r4, r3
 8000d62:	d8ed      	bhi.n	8000d40 <main+0x68>
	  Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 8000d64:	4b26      	ldr	r3, [pc, #152]	@ (8000e00 <main+0x128>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d6a:	4a27      	ldr	r2, [pc, #156]	@ (8000e08 <main+0x130>)
 8000d6c:	6013      	str	r3, [r2, #0]

	  pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8000d6e:	f000 fb2f 	bl	80013d0 <HAL_GetTick>
 8000d72:	4603      	mov	r3, r0
 8000d74:	4a23      	ldr	r2, [pc, #140]	@ (8000e04 <main+0x12c>)
 8000d76:	6013      	str	r3, [r2, #0]
	  // wait for the echo pin to go low
	  while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 8000d78:	bf00      	nop
 8000d7a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d82:	f000 fda5 	bl	80018d0 <HAL_GPIO_ReadPin>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d008      	beq.n	8000d9e <main+0xc6>
 8000d8c:	4b1d      	ldr	r3, [pc, #116]	@ (8000e04 <main+0x12c>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f103 0432 	add.w	r4, r3, #50	@ 0x32
 8000d94:	f000 fb1c 	bl	80013d0 <HAL_GetTick>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	429c      	cmp	r4, r3
 8000d9c:	d8ed      	bhi.n	8000d7a <main+0xa2>
	  Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 8000d9e:	4b18      	ldr	r3, [pc, #96]	@ (8000e00 <main+0x128>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000da4:	4a19      	ldr	r2, [pc, #100]	@ (8000e0c <main+0x134>)
 8000da6:	6013      	str	r3, [r2, #0]

	  Distance = (Value2-Value1)* 0.034/2;
 8000da8:	4b18      	ldr	r3, [pc, #96]	@ (8000e0c <main+0x134>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4b16      	ldr	r3, [pc, #88]	@ (8000e08 <main+0x130>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fb4e 	bl	8000454 <__aeabi_ui2d>
 8000db8:	a30f      	add	r3, pc, #60	@ (adr r3, 8000df8 <main+0x120>)
 8000dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dbe:	f7ff fbc3 	bl	8000548 <__aeabi_dmul>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	4610      	mov	r0, r2
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f04f 0200 	mov.w	r2, #0
 8000dce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000dd2:	f7ff fce3 	bl	800079c <__aeabi_ddiv>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	460b      	mov	r3, r1
 8000dda:	4610      	mov	r0, r2
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f7ff fdc5 	bl	800096c <__aeabi_d2uiz>
 8000de2:	4603      	mov	r3, r0
 8000de4:	b29a      	uxth	r2, r3
 8000de6:	4b0a      	ldr	r3, [pc, #40]	@ (8000e10 <main+0x138>)
 8000de8:	801a      	strh	r2, [r3, #0]
	  HAL_Delay(50);
 8000dea:	2032      	movs	r0, #50	@ 0x32
 8000dec:	f000 fafc 	bl	80013e8 <HAL_Delay>
	  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000df0:	e788      	b.n	8000d04 <main+0x2c>
 8000df2:	bf00      	nop
 8000df4:	f3af 8000 	nop.w
 8000df8:	b020c49c 	.word	0xb020c49c
 8000dfc:	3fa16872 	.word	0x3fa16872
 8000e00:	20000028 	.word	0x20000028
 8000e04:	200000fc 	.word	0x200000fc
 8000e08:	20000100 	.word	0x20000100
 8000e0c:	20000104 	.word	0x20000104
 8000e10:	20000108 	.word	0x20000108

08000e14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b096      	sub	sp, #88	@ 0x58
 8000e18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	2244      	movs	r2, #68	@ 0x44
 8000e20:	2100      	movs	r1, #0
 8000e22:	4618      	mov	r0, r3
 8000e24:	f002 fe9b 	bl	8003b5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e28:	463b      	mov	r3, r7
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
 8000e32:	60da      	str	r2, [r3, #12]
 8000e34:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e36:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000e3a:	f000 fd97 	bl	800196c <HAL_PWREx_ControlVoltageScaling>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000e44:	f000 f93c 	bl	80010c0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000e48:	f000 fd72 	bl	8001930 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000e4c:	4b21      	ldr	r3, [pc, #132]	@ (8000ed4 <SystemClock_Config+0xc0>)
 8000e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000e52:	4a20      	ldr	r2, [pc, #128]	@ (8000ed4 <SystemClock_Config+0xc0>)
 8000e54:	f023 0318 	bic.w	r3, r3, #24
 8000e58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000e5c:	2314      	movs	r3, #20
 8000e5e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000e60:	2301      	movs	r3, #1
 8000e62:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e64:	2301      	movs	r3, #1
 8000e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000e6c:	2360      	movs	r3, #96	@ 0x60
 8000e6e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e70:	2302      	movs	r3, #2
 8000e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000e74:	2301      	movs	r3, #1
 8000e76:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 36;
 8000e7c:	2324      	movs	r3, #36	@ 0x24
 8000e7e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e80:	2307      	movs	r3, #7
 8000e82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e84:	2302      	movs	r3, #2
 8000e86:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	4618      	mov	r0, r3
 8000e92:	f000 fdc1 	bl	8001a18 <HAL_RCC_OscConfig>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000e9c:	f000 f910 	bl	80010c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea0:	230f      	movs	r3, #15
 8000ea2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eac:	2300      	movs	r3, #0
 8000eae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000eb4:	463b      	mov	r3, r7
 8000eb6:	2104      	movs	r1, #4
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f001 f9c1 	bl	8002240 <HAL_RCC_ClockConfig>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000ec4:	f000 f8fc 	bl	80010c0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000ec8:	f001 fdd4 	bl	8002a74 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000ecc:	bf00      	nop
 8000ece:	3758      	adds	r7, #88	@ 0x58
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40021000 	.word	0x40021000

08000ed8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b088      	sub	sp, #32
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ede:	f107 0310 	add.w	r3, r7, #16
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eec:	1d3b      	adds	r3, r7, #4
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ef6:	4b20      	ldr	r3, [pc, #128]	@ (8000f78 <MX_TIM1_Init+0xa0>)
 8000ef8:	4a20      	ldr	r2, [pc, #128]	@ (8000f7c <MX_TIM1_Init+0xa4>)
 8000efa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000efc:	4b1e      	ldr	r3, [pc, #120]	@ (8000f78 <MX_TIM1_Init+0xa0>)
 8000efe:	2247      	movs	r2, #71	@ 0x47
 8000f00:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f02:	4b1d      	ldr	r3, [pc, #116]	@ (8000f78 <MX_TIM1_Init+0xa0>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f08:	4b1b      	ldr	r3, [pc, #108]	@ (8000f78 <MX_TIM1_Init+0xa0>)
 8000f0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f0e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f10:	4b19      	ldr	r3, [pc, #100]	@ (8000f78 <MX_TIM1_Init+0xa0>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f16:	4b18      	ldr	r3, [pc, #96]	@ (8000f78 <MX_TIM1_Init+0xa0>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f1c:	4b16      	ldr	r3, [pc, #88]	@ (8000f78 <MX_TIM1_Init+0xa0>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f22:	4815      	ldr	r0, [pc, #84]	@ (8000f78 <MX_TIM1_Init+0xa0>)
 8000f24:	f001 fea8 	bl	8002c78 <HAL_TIM_Base_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000f2e:	f000 f8c7 	bl	80010c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f38:	f107 0310 	add.w	r3, r7, #16
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	480e      	ldr	r0, [pc, #56]	@ (8000f78 <MX_TIM1_Init+0xa0>)
 8000f40:	f001 ff3e 	bl	8002dc0 <HAL_TIM_ConfigClockSource>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000f4a:	f000 f8b9 	bl	80010c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f52:	2300      	movs	r3, #0
 8000f54:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f56:	2300      	movs	r3, #0
 8000f58:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4806      	ldr	r0, [pc, #24]	@ (8000f78 <MX_TIM1_Init+0xa0>)
 8000f60:	f002 f902 	bl	8003168 <HAL_TIMEx_MasterConfigSynchronization>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000f6a:	f000 f8a9 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f6e:	bf00      	nop
 8000f70:	3720      	adds	r7, #32
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000028 	.word	0x20000028
 8000f7c:	40012c00 	.word	0x40012c00

08000f80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f84:	4b14      	ldr	r3, [pc, #80]	@ (8000fd8 <MX_USART2_UART_Init+0x58>)
 8000f86:	4a15      	ldr	r2, [pc, #84]	@ (8000fdc <MX_USART2_UART_Init+0x5c>)
 8000f88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f8a:	4b13      	ldr	r3, [pc, #76]	@ (8000fd8 <MX_USART2_UART_Init+0x58>)
 8000f8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f92:	4b11      	ldr	r3, [pc, #68]	@ (8000fd8 <MX_USART2_UART_Init+0x58>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f98:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd8 <MX_USART2_UART_Init+0x58>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd8 <MX_USART2_UART_Init+0x58>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd8 <MX_USART2_UART_Init+0x58>)
 8000fa6:	220c      	movs	r2, #12
 8000fa8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000faa:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd8 <MX_USART2_UART_Init+0x58>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb0:	4b09      	ldr	r3, [pc, #36]	@ (8000fd8 <MX_USART2_UART_Init+0x58>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fb6:	4b08      	ldr	r3, [pc, #32]	@ (8000fd8 <MX_USART2_UART_Init+0x58>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <MX_USART2_UART_Init+0x58>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fc2:	4805      	ldr	r0, [pc, #20]	@ (8000fd8 <MX_USART2_UART_Init+0x58>)
 8000fc4:	f002 f936 	bl	8003234 <HAL_UART_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000fce:	f000 f877 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000074 	.word	0x20000074
 8000fdc:	40004400 	.word	0x40004400

08000fe0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe6:	f107 030c 	add.w	r3, r7, #12
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]
 8000ff4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff6:	4b30      	ldr	r3, [pc, #192]	@ (80010b8 <MX_GPIO_Init+0xd8>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffa:	4a2f      	ldr	r2, [pc, #188]	@ (80010b8 <MX_GPIO_Init+0xd8>)
 8000ffc:	f043 0304 	orr.w	r3, r3, #4
 8001000:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001002:	4b2d      	ldr	r3, [pc, #180]	@ (80010b8 <MX_GPIO_Init+0xd8>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001006:	f003 0304 	and.w	r3, r3, #4
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800100e:	4b2a      	ldr	r3, [pc, #168]	@ (80010b8 <MX_GPIO_Init+0xd8>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001012:	4a29      	ldr	r2, [pc, #164]	@ (80010b8 <MX_GPIO_Init+0xd8>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800101a:	4b27      	ldr	r3, [pc, #156]	@ (80010b8 <MX_GPIO_Init+0xd8>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001026:	4b24      	ldr	r3, [pc, #144]	@ (80010b8 <MX_GPIO_Init+0xd8>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800102a:	4a23      	ldr	r2, [pc, #140]	@ (80010b8 <MX_GPIO_Init+0xd8>)
 800102c:	f043 0302 	orr.w	r3, r3, #2
 8001030:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001032:	4b21      	ldr	r3, [pc, #132]	@ (80010b8 <MX_GPIO_Init+0xd8>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	603b      	str	r3, [r7, #0]
 800103c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001044:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001048:	f000 fc5a 	bl	8001900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800104c:	2200      	movs	r2, #0
 800104e:	2108      	movs	r1, #8
 8001050:	481a      	ldr	r0, [pc, #104]	@ (80010bc <MX_GPIO_Init+0xdc>)
 8001052:	f000 fc55 	bl	8001900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001056:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800105a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800105c:	2300      	movs	r3, #0
 800105e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001064:	f107 030c 	add.w	r3, r7, #12
 8001068:	4619      	mov	r1, r3
 800106a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800106e:	f000 fac5 	bl	80015fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001072:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001076:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001078:	2301      	movs	r3, #1
 800107a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001080:	2300      	movs	r3, #0
 8001082:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001084:	f107 030c 	add.w	r3, r7, #12
 8001088:	4619      	mov	r1, r3
 800108a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800108e:	f000 fab5 	bl	80015fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001092:	2308      	movs	r3, #8
 8001094:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001096:	2301      	movs	r3, #1
 8001098:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109e:	2300      	movs	r3, #0
 80010a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80010a2:	f107 030c 	add.w	r3, r7, #12
 80010a6:	4619      	mov	r1, r3
 80010a8:	4804      	ldr	r0, [pc, #16]	@ (80010bc <MX_GPIO_Init+0xdc>)
 80010aa:	f000 faa7 	bl	80015fc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80010ae:	bf00      	nop
 80010b0:	3720      	adds	r7, #32
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40021000 	.word	0x40021000
 80010bc:	48000400 	.word	0x48000400

080010c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c4:	b672      	cpsid	i
}
 80010c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010c8:	bf00      	nop
 80010ca:	e7fd      	b.n	80010c8 <Error_Handler+0x8>

080010cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001110 <HAL_MspInit+0x44>)
 80010d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001110 <HAL_MspInit+0x44>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80010de:	4b0c      	ldr	r3, [pc, #48]	@ (8001110 <HAL_MspInit+0x44>)
 80010e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ea:	4b09      	ldr	r3, [pc, #36]	@ (8001110 <HAL_MspInit+0x44>)
 80010ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ee:	4a08      	ldr	r2, [pc, #32]	@ (8001110 <HAL_MspInit+0x44>)
 80010f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80010f6:	4b06      	ldr	r3, [pc, #24]	@ (8001110 <HAL_MspInit+0x44>)
 80010f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010fe:	603b      	str	r3, [r7, #0]
 8001100:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	40021000 	.word	0x40021000

08001114 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a0a      	ldr	r2, [pc, #40]	@ (800114c <HAL_TIM_Base_MspInit+0x38>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d10b      	bne.n	800113e <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001126:	4b0a      	ldr	r3, [pc, #40]	@ (8001150 <HAL_TIM_Base_MspInit+0x3c>)
 8001128:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800112a:	4a09      	ldr	r2, [pc, #36]	@ (8001150 <HAL_TIM_Base_MspInit+0x3c>)
 800112c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001130:	6613      	str	r3, [r2, #96]	@ 0x60
 8001132:	4b07      	ldr	r3, [pc, #28]	@ (8001150 <HAL_TIM_Base_MspInit+0x3c>)
 8001134:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001136:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800113e:	bf00      	nop
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	40012c00 	.word	0x40012c00
 8001150:	40021000 	.word	0x40021000

08001154 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b09e      	sub	sp, #120	@ 0x78
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800116c:	f107 0310 	add.w	r3, r7, #16
 8001170:	2254      	movs	r2, #84	@ 0x54
 8001172:	2100      	movs	r1, #0
 8001174:	4618      	mov	r0, r3
 8001176:	f002 fcf2 	bl	8003b5e <memset>
  if(huart->Instance==USART2)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a28      	ldr	r2, [pc, #160]	@ (8001220 <HAL_UART_MspInit+0xcc>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d148      	bne.n	8001216 <HAL_UART_MspInit+0xc2>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001184:	2302      	movs	r3, #2
 8001186:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001188:	2300      	movs	r3, #0
 800118a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800118c:	f107 0310 	add.w	r3, r7, #16
 8001190:	4618      	mov	r0, r3
 8001192:	f001 fa79 	bl	8002688 <HAL_RCCEx_PeriphCLKConfig>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800119c:	f7ff ff90 	bl	80010c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011a0:	4b20      	ldr	r3, [pc, #128]	@ (8001224 <HAL_UART_MspInit+0xd0>)
 80011a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011a4:	4a1f      	ldr	r2, [pc, #124]	@ (8001224 <HAL_UART_MspInit+0xd0>)
 80011a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80011ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001224 <HAL_UART_MspInit+0xd0>)
 80011ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001224 <HAL_UART_MspInit+0xd0>)
 80011ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011bc:	4a19      	ldr	r2, [pc, #100]	@ (8001224 <HAL_UART_MspInit+0xd0>)
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011c4:	4b17      	ldr	r3, [pc, #92]	@ (8001224 <HAL_UART_MspInit+0xd0>)
 80011c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c8:	f003 0301 	and.w	r3, r3, #1
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80011d0:	2304      	movs	r3, #4
 80011d2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d4:	2302      	movs	r3, #2
 80011d6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011dc:	2303      	movs	r3, #3
 80011de:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011e0:	2307      	movs	r3, #7
 80011e2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80011e4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80011e8:	4619      	mov	r1, r3
 80011ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ee:	f000 fa05 	bl	80015fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80011f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011f6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f8:	2302      	movs	r3, #2
 80011fa:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001200:	2303      	movs	r3, #3
 8001202:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001204:	2303      	movs	r3, #3
 8001206:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001208:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800120c:	4619      	mov	r1, r3
 800120e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001212:	f000 f9f3 	bl	80015fc <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001216:	bf00      	nop
 8001218:	3778      	adds	r7, #120	@ 0x78
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40004400 	.word	0x40004400
 8001224:	40021000 	.word	0x40021000

08001228 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800122c:	bf00      	nop
 800122e:	e7fd      	b.n	800122c <NMI_Handler+0x4>

08001230 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <HardFault_Handler+0x4>

08001238 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800123c:	bf00      	nop
 800123e:	e7fd      	b.n	800123c <MemManage_Handler+0x4>

08001240 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001244:	bf00      	nop
 8001246:	e7fd      	b.n	8001244 <BusFault_Handler+0x4>

08001248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800124c:	bf00      	nop
 800124e:	e7fd      	b.n	800124c <UsageFault_Handler+0x4>

08001250 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800127e:	f000 f893 	bl	80013a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800128c:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <SystemInit+0x20>)
 800128e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001292:	4a05      	ldr	r2, [pc, #20]	@ (80012a8 <SystemInit+0x20>)
 8001294:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001298:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012b0:	f7ff ffea 	bl	8001288 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012b4:	480c      	ldr	r0, [pc, #48]	@ (80012e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80012b6:	490d      	ldr	r1, [pc, #52]	@ (80012ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80012b8:	4a0d      	ldr	r2, [pc, #52]	@ (80012f0 <LoopForever+0xe>)
  movs r3, #0
 80012ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012bc:	e002      	b.n	80012c4 <LoopCopyDataInit>

080012be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012c2:	3304      	adds	r3, #4

080012c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012c8:	d3f9      	bcc.n	80012be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ca:	4a0a      	ldr	r2, [pc, #40]	@ (80012f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012cc:	4c0a      	ldr	r4, [pc, #40]	@ (80012f8 <LoopForever+0x16>)
  movs r3, #0
 80012ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d0:	e001      	b.n	80012d6 <LoopFillZerobss>

080012d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d4:	3204      	adds	r2, #4

080012d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012d8:	d3fb      	bcc.n	80012d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012da:	f002 fc49 	bl	8003b70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012de:	f7ff fcfb 	bl	8000cd8 <main>

080012e2 <LoopForever>:

LoopForever:
    b LoopForever
 80012e2:	e7fe      	b.n	80012e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012e4:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80012e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012ec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012f0:	08003c28 	.word	0x08003c28
  ldr r2, =_sbss
 80012f4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012f8:	20000110 	.word	0x20000110

080012fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012fc:	e7fe      	b.n	80012fc <ADC1_IRQHandler>

080012fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001304:	2300      	movs	r3, #0
 8001306:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001308:	2003      	movs	r0, #3
 800130a:	f000 f943 	bl	8001594 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800130e:	2000      	movs	r0, #0
 8001310:	f000 f80e 	bl	8001330 <HAL_InitTick>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d002      	beq.n	8001320 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	71fb      	strb	r3, [r7, #7]
 800131e:	e001      	b.n	8001324 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001320:	f7ff fed4 	bl	80010cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001324:	79fb      	ldrb	r3, [r7, #7]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001338:	2300      	movs	r3, #0
 800133a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800133c:	4b17      	ldr	r3, [pc, #92]	@ (800139c <HAL_InitTick+0x6c>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d023      	beq.n	800138c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001344:	4b16      	ldr	r3, [pc, #88]	@ (80013a0 <HAL_InitTick+0x70>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4b14      	ldr	r3, [pc, #80]	@ (800139c <HAL_InitTick+0x6c>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	4619      	mov	r1, r3
 800134e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001352:	fbb3 f3f1 	udiv	r3, r3, r1
 8001356:	fbb2 f3f3 	udiv	r3, r2, r3
 800135a:	4618      	mov	r0, r3
 800135c:	f000 f941 	bl	80015e2 <HAL_SYSTICK_Config>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d10f      	bne.n	8001386 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b0f      	cmp	r3, #15
 800136a:	d809      	bhi.n	8001380 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800136c:	2200      	movs	r2, #0
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	f04f 30ff 	mov.w	r0, #4294967295
 8001374:	f000 f919 	bl	80015aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001378:	4a0a      	ldr	r2, [pc, #40]	@ (80013a4 <HAL_InitTick+0x74>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	e007      	b.n	8001390 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	73fb      	strb	r3, [r7, #15]
 8001384:	e004      	b.n	8001390 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	73fb      	strb	r3, [r7, #15]
 800138a:	e001      	b.n	8001390 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001390:	7bfb      	ldrb	r3, [r7, #15]
}
 8001392:	4618      	mov	r0, r3
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000008 	.word	0x20000008
 80013a0:	20000000 	.word	0x20000000
 80013a4:	20000004 	.word	0x20000004

080013a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013ac:	4b06      	ldr	r3, [pc, #24]	@ (80013c8 <HAL_IncTick+0x20>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	461a      	mov	r2, r3
 80013b2:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <HAL_IncTick+0x24>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4413      	add	r3, r2
 80013b8:	4a04      	ldr	r2, [pc, #16]	@ (80013cc <HAL_IncTick+0x24>)
 80013ba:	6013      	str	r3, [r2, #0]
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	20000008 	.word	0x20000008
 80013cc:	2000010c 	.word	0x2000010c

080013d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return uwTick;
 80013d4:	4b03      	ldr	r3, [pc, #12]	@ (80013e4 <HAL_GetTick+0x14>)
 80013d6:	681b      	ldr	r3, [r3, #0]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	2000010c 	.word	0x2000010c

080013e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013f0:	f7ff ffee 	bl	80013d0 <HAL_GetTick>
 80013f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001400:	d005      	beq.n	800140e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001402:	4b0a      	ldr	r3, [pc, #40]	@ (800142c <HAL_Delay+0x44>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	461a      	mov	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4413      	add	r3, r2
 800140c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800140e:	bf00      	nop
 8001410:	f7ff ffde 	bl	80013d0 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	429a      	cmp	r2, r3
 800141e:	d8f7      	bhi.n	8001410 <HAL_Delay+0x28>
  {
  }
}
 8001420:	bf00      	nop
 8001422:	bf00      	nop
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000008 	.word	0x20000008

08001430 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001440:	4b0c      	ldr	r3, [pc, #48]	@ (8001474 <__NVIC_SetPriorityGrouping+0x44>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001446:	68ba      	ldr	r2, [r7, #8]
 8001448:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800144c:	4013      	ands	r3, r2
 800144e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001458:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800145c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001460:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001462:	4a04      	ldr	r2, [pc, #16]	@ (8001474 <__NVIC_SetPriorityGrouping+0x44>)
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	60d3      	str	r3, [r2, #12]
}
 8001468:	bf00      	nop
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800147c:	4b04      	ldr	r3, [pc, #16]	@ (8001490 <__NVIC_GetPriorityGrouping+0x18>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	0a1b      	lsrs	r3, r3, #8
 8001482:	f003 0307 	and.w	r3, r3, #7
}
 8001486:	4618      	mov	r0, r3
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	6039      	str	r1, [r7, #0]
 800149e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	db0a      	blt.n	80014be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	490c      	ldr	r1, [pc, #48]	@ (80014e0 <__NVIC_SetPriority+0x4c>)
 80014ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b2:	0112      	lsls	r2, r2, #4
 80014b4:	b2d2      	uxtb	r2, r2
 80014b6:	440b      	add	r3, r1
 80014b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014bc:	e00a      	b.n	80014d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	4908      	ldr	r1, [pc, #32]	@ (80014e4 <__NVIC_SetPriority+0x50>)
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	f003 030f 	and.w	r3, r3, #15
 80014ca:	3b04      	subs	r3, #4
 80014cc:	0112      	lsls	r2, r2, #4
 80014ce:	b2d2      	uxtb	r2, r2
 80014d0:	440b      	add	r3, r1
 80014d2:	761a      	strb	r2, [r3, #24]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	e000e100 	.word	0xe000e100
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b089      	sub	sp, #36	@ 0x24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	f1c3 0307 	rsb	r3, r3, #7
 8001502:	2b04      	cmp	r3, #4
 8001504:	bf28      	it	cs
 8001506:	2304      	movcs	r3, #4
 8001508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3304      	adds	r3, #4
 800150e:	2b06      	cmp	r3, #6
 8001510:	d902      	bls.n	8001518 <NVIC_EncodePriority+0x30>
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3b03      	subs	r3, #3
 8001516:	e000      	b.n	800151a <NVIC_EncodePriority+0x32>
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800151c:	f04f 32ff 	mov.w	r2, #4294967295
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43da      	mvns	r2, r3
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	401a      	ands	r2, r3
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001530:	f04f 31ff 	mov.w	r1, #4294967295
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	fa01 f303 	lsl.w	r3, r1, r3
 800153a:	43d9      	mvns	r1, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001540:	4313      	orrs	r3, r2
         );
}
 8001542:	4618      	mov	r0, r3
 8001544:	3724      	adds	r7, #36	@ 0x24
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
	...

08001550 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3b01      	subs	r3, #1
 800155c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001560:	d301      	bcc.n	8001566 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001562:	2301      	movs	r3, #1
 8001564:	e00f      	b.n	8001586 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001566:	4a0a      	ldr	r2, [pc, #40]	@ (8001590 <SysTick_Config+0x40>)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3b01      	subs	r3, #1
 800156c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800156e:	210f      	movs	r1, #15
 8001570:	f04f 30ff 	mov.w	r0, #4294967295
 8001574:	f7ff ff8e 	bl	8001494 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001578:	4b05      	ldr	r3, [pc, #20]	@ (8001590 <SysTick_Config+0x40>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800157e:	4b04      	ldr	r3, [pc, #16]	@ (8001590 <SysTick_Config+0x40>)
 8001580:	2207      	movs	r2, #7
 8001582:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	e000e010 	.word	0xe000e010

08001594 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff ff47 	bl	8001430 <__NVIC_SetPriorityGrouping>
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b086      	sub	sp, #24
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	4603      	mov	r3, r0
 80015b2:	60b9      	str	r1, [r7, #8]
 80015b4:	607a      	str	r2, [r7, #4]
 80015b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015bc:	f7ff ff5c 	bl	8001478 <__NVIC_GetPriorityGrouping>
 80015c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	68b9      	ldr	r1, [r7, #8]
 80015c6:	6978      	ldr	r0, [r7, #20]
 80015c8:	f7ff ff8e 	bl	80014e8 <NVIC_EncodePriority>
 80015cc:	4602      	mov	r2, r0
 80015ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015d2:	4611      	mov	r1, r2
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff ff5d 	bl	8001494 <__NVIC_SetPriority>
}
 80015da:	bf00      	nop
 80015dc:	3718      	adds	r7, #24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b082      	sub	sp, #8
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f7ff ffb0 	bl	8001550 <SysTick_Config>
 80015f0:	4603      	mov	r3, r0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b087      	sub	sp, #28
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001606:	2300      	movs	r3, #0
 8001608:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800160a:	e148      	b.n	800189e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	2101      	movs	r1, #1
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	fa01 f303 	lsl.w	r3, r1, r3
 8001618:	4013      	ands	r3, r2
 800161a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2b00      	cmp	r3, #0
 8001620:	f000 813a 	beq.w	8001898 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 0303 	and.w	r3, r3, #3
 800162c:	2b01      	cmp	r3, #1
 800162e:	d005      	beq.n	800163c <HAL_GPIO_Init+0x40>
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f003 0303 	and.w	r3, r3, #3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d130      	bne.n	800169e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	2203      	movs	r2, #3
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	4013      	ands	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	68da      	ldr	r2, [r3, #12]
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	4313      	orrs	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001672:	2201      	movs	r2, #1
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43db      	mvns	r3, r3
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	4013      	ands	r3, r2
 8001680:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	091b      	lsrs	r3, r3, #4
 8001688:	f003 0201 	and.w	r2, r3, #1
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	4313      	orrs	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f003 0303 	and.w	r3, r3, #3
 80016a6:	2b03      	cmp	r3, #3
 80016a8:	d017      	beq.n	80016da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	2203      	movs	r2, #3
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43db      	mvns	r3, r3
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	4013      	ands	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f003 0303 	and.w	r3, r3, #3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d123      	bne.n	800172e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	08da      	lsrs	r2, r3, #3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	3208      	adds	r2, #8
 80016ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	220f      	movs	r2, #15
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	43db      	mvns	r3, r3
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	4013      	ands	r3, r2
 8001708:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	691a      	ldr	r2, [r3, #16]
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	f003 0307 	and.w	r3, r3, #7
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	4313      	orrs	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	08da      	lsrs	r2, r3, #3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3208      	adds	r2, #8
 8001728:	6939      	ldr	r1, [r7, #16]
 800172a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	2203      	movs	r2, #3
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43db      	mvns	r3, r3
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	4013      	ands	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f003 0203 	and.w	r2, r3, #3
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	4313      	orrs	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800176a:	2b00      	cmp	r3, #0
 800176c:	f000 8094 	beq.w	8001898 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001770:	4b52      	ldr	r3, [pc, #328]	@ (80018bc <HAL_GPIO_Init+0x2c0>)
 8001772:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001774:	4a51      	ldr	r2, [pc, #324]	@ (80018bc <HAL_GPIO_Init+0x2c0>)
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	6613      	str	r3, [r2, #96]	@ 0x60
 800177c:	4b4f      	ldr	r3, [pc, #316]	@ (80018bc <HAL_GPIO_Init+0x2c0>)
 800177e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001788:	4a4d      	ldr	r2, [pc, #308]	@ (80018c0 <HAL_GPIO_Init+0x2c4>)
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	089b      	lsrs	r3, r3, #2
 800178e:	3302      	adds	r3, #2
 8001790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001794:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	f003 0303 	and.w	r3, r3, #3
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	220f      	movs	r2, #15
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	43db      	mvns	r3, r3
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	4013      	ands	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80017b2:	d00d      	beq.n	80017d0 <HAL_GPIO_Init+0x1d4>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a43      	ldr	r2, [pc, #268]	@ (80018c4 <HAL_GPIO_Init+0x2c8>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d007      	beq.n	80017cc <HAL_GPIO_Init+0x1d0>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a42      	ldr	r2, [pc, #264]	@ (80018c8 <HAL_GPIO_Init+0x2cc>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d101      	bne.n	80017c8 <HAL_GPIO_Init+0x1cc>
 80017c4:	2302      	movs	r3, #2
 80017c6:	e004      	b.n	80017d2 <HAL_GPIO_Init+0x1d6>
 80017c8:	2307      	movs	r3, #7
 80017ca:	e002      	b.n	80017d2 <HAL_GPIO_Init+0x1d6>
 80017cc:	2301      	movs	r3, #1
 80017ce:	e000      	b.n	80017d2 <HAL_GPIO_Init+0x1d6>
 80017d0:	2300      	movs	r3, #0
 80017d2:	697a      	ldr	r2, [r7, #20]
 80017d4:	f002 0203 	and.w	r2, r2, #3
 80017d8:	0092      	lsls	r2, r2, #2
 80017da:	4093      	lsls	r3, r2
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	4313      	orrs	r3, r2
 80017e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017e2:	4937      	ldr	r1, [pc, #220]	@ (80018c0 <HAL_GPIO_Init+0x2c4>)
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	089b      	lsrs	r3, r3, #2
 80017e8:	3302      	adds	r3, #2
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017f0:	4b36      	ldr	r3, [pc, #216]	@ (80018cc <HAL_GPIO_Init+0x2d0>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	43db      	mvns	r3, r3
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	4013      	ands	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d003      	beq.n	8001814 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	4313      	orrs	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001814:	4a2d      	ldr	r2, [pc, #180]	@ (80018cc <HAL_GPIO_Init+0x2d0>)
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800181a:	4b2c      	ldr	r3, [pc, #176]	@ (80018cc <HAL_GPIO_Init+0x2d0>)
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	43db      	mvns	r3, r3
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	4013      	ands	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d003      	beq.n	800183e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4313      	orrs	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800183e:	4a23      	ldr	r2, [pc, #140]	@ (80018cc <HAL_GPIO_Init+0x2d0>)
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001844:	4b21      	ldr	r3, [pc, #132]	@ (80018cc <HAL_GPIO_Init+0x2d0>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	43db      	mvns	r3, r3
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4013      	ands	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d003      	beq.n	8001868 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	4313      	orrs	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001868:	4a18      	ldr	r2, [pc, #96]	@ (80018cc <HAL_GPIO_Init+0x2d0>)
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800186e:	4b17      	ldr	r3, [pc, #92]	@ (80018cc <HAL_GPIO_Init+0x2d0>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	43db      	mvns	r3, r3
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	4013      	ands	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	4313      	orrs	r3, r2
 8001890:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001892:	4a0e      	ldr	r2, [pc, #56]	@ (80018cc <HAL_GPIO_Init+0x2d0>)
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	3301      	adds	r3, #1
 800189c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	fa22 f303 	lsr.w	r3, r2, r3
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f47f aeaf 	bne.w	800160c <HAL_GPIO_Init+0x10>
  }
}
 80018ae:	bf00      	nop
 80018b0:	bf00      	nop
 80018b2:	371c      	adds	r7, #28
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	40021000 	.word	0x40021000
 80018c0:	40010000 	.word	0x40010000
 80018c4:	48000400 	.word	0x48000400
 80018c8:	48000800 	.word	0x48000800
 80018cc:	40010400 	.word	0x40010400

080018d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	691a      	ldr	r2, [r3, #16]
 80018e0:	887b      	ldrh	r3, [r7, #2]
 80018e2:	4013      	ands	r3, r2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d002      	beq.n	80018ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018e8:	2301      	movs	r3, #1
 80018ea:	73fb      	strb	r3, [r7, #15]
 80018ec:	e001      	b.n	80018f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018ee:	2300      	movs	r3, #0
 80018f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	807b      	strh	r3, [r7, #2]
 800190c:	4613      	mov	r3, r2
 800190e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001910:	787b      	ldrb	r3, [r7, #1]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001916:	887a      	ldrh	r2, [r7, #2]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800191c:	e002      	b.n	8001924 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800191e:	887a      	ldrh	r2, [r7, #2]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001934:	4b05      	ldr	r3, [pc, #20]	@ (800194c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a04      	ldr	r2, [pc, #16]	@ (800194c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800193a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800193e:	6013      	str	r3, [r2, #0]
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	40007000 	.word	0x40007000

08001950 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001954:	4b04      	ldr	r3, [pc, #16]	@ (8001968 <HAL_PWREx_GetVoltageRange+0x18>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800195c:	4618      	mov	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	40007000 	.word	0x40007000

0800196c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800197a:	d130      	bne.n	80019de <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800197c:	4b23      	ldr	r3, [pc, #140]	@ (8001a0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001984:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001988:	d038      	beq.n	80019fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800198a:	4b20      	ldr	r3, [pc, #128]	@ (8001a0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001992:	4a1e      	ldr	r2, [pc, #120]	@ (8001a0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001994:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001998:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800199a:	4b1d      	ldr	r3, [pc, #116]	@ (8001a10 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2232      	movs	r2, #50	@ 0x32
 80019a0:	fb02 f303 	mul.w	r3, r2, r3
 80019a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001a14 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80019a6:	fba2 2303 	umull	r2, r3, r2, r3
 80019aa:	0c9b      	lsrs	r3, r3, #18
 80019ac:	3301      	adds	r3, #1
 80019ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019b0:	e002      	b.n	80019b8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	3b01      	subs	r3, #1
 80019b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019b8:	4b14      	ldr	r3, [pc, #80]	@ (8001a0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ba:	695b      	ldr	r3, [r3, #20]
 80019bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019c4:	d102      	bne.n	80019cc <HAL_PWREx_ControlVoltageScaling+0x60>
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d1f2      	bne.n	80019b2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019cc:	4b0f      	ldr	r3, [pc, #60]	@ (8001a0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019d8:	d110      	bne.n	80019fc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e00f      	b.n	80019fe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80019de:	4b0b      	ldr	r3, [pc, #44]	@ (8001a0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80019e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019ea:	d007      	beq.n	80019fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80019ec:	4b07      	ldr	r3, [pc, #28]	@ (8001a0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80019f4:	4a05      	ldr	r2, [pc, #20]	@ (8001a0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019fa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	40007000 	.word	0x40007000
 8001a10:	20000000 	.word	0x20000000
 8001a14:	431bde83 	.word	0x431bde83

08001a18 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b088      	sub	sp, #32
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d102      	bne.n	8001a2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	f000 bc02 	b.w	8002230 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a2c:	4b96      	ldr	r3, [pc, #600]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f003 030c 	and.w	r3, r3, #12
 8001a34:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a36:	4b94      	ldr	r3, [pc, #592]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	f003 0303 	and.w	r3, r3, #3
 8001a3e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0310 	and.w	r3, r3, #16
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f000 80e4 	beq.w	8001c16 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d007      	beq.n	8001a64 <HAL_RCC_OscConfig+0x4c>
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	2b0c      	cmp	r3, #12
 8001a58:	f040 808b 	bne.w	8001b72 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	f040 8087 	bne.w	8001b72 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a64:	4b88      	ldr	r3, [pc, #544]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d005      	beq.n	8001a7c <HAL_RCC_OscConfig+0x64>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e3d9      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a1a      	ldr	r2, [r3, #32]
 8001a80:	4b81      	ldr	r3, [pc, #516]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0308 	and.w	r3, r3, #8
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d004      	beq.n	8001a96 <HAL_RCC_OscConfig+0x7e>
 8001a8c:	4b7e      	ldr	r3, [pc, #504]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a94:	e005      	b.n	8001aa2 <HAL_RCC_OscConfig+0x8a>
 8001a96:	4b7c      	ldr	r3, [pc, #496]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001a98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a9c:	091b      	lsrs	r3, r3, #4
 8001a9e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d223      	bcs.n	8001aee <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a1b      	ldr	r3, [r3, #32]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f000 fd8c 	bl	80025c8 <RCC_SetFlashLatencyFromMSIRange>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e3ba      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001aba:	4b73      	ldr	r3, [pc, #460]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a72      	ldr	r2, [pc, #456]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001ac0:	f043 0308 	orr.w	r3, r3, #8
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	4b70      	ldr	r3, [pc, #448]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
 8001ad2:	496d      	ldr	r1, [pc, #436]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ad8:	4b6b      	ldr	r3, [pc, #428]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69db      	ldr	r3, [r3, #28]
 8001ae4:	021b      	lsls	r3, r3, #8
 8001ae6:	4968      	ldr	r1, [pc, #416]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	604b      	str	r3, [r1, #4]
 8001aec:	e025      	b.n	8001b3a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001aee:	4b66      	ldr	r3, [pc, #408]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a65      	ldr	r2, [pc, #404]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001af4:	f043 0308 	orr.w	r3, r3, #8
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	4b63      	ldr	r3, [pc, #396]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	4960      	ldr	r1, [pc, #384]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b0c:	4b5e      	ldr	r3, [pc, #376]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	69db      	ldr	r3, [r3, #28]
 8001b18:	021b      	lsls	r3, r3, #8
 8001b1a:	495b      	ldr	r1, [pc, #364]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d109      	bne.n	8001b3a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a1b      	ldr	r3, [r3, #32]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 fd4c 	bl	80025c8 <RCC_SetFlashLatencyFromMSIRange>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e37a      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b3a:	f000 fc81 	bl	8002440 <HAL_RCC_GetSysClockFreq>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	4b51      	ldr	r3, [pc, #324]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	091b      	lsrs	r3, r3, #4
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	4950      	ldr	r1, [pc, #320]	@ (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001b4c:	5ccb      	ldrb	r3, [r1, r3]
 8001b4e:	f003 031f 	and.w	r3, r3, #31
 8001b52:	fa22 f303 	lsr.w	r3, r2, r3
 8001b56:	4a4e      	ldr	r2, [pc, #312]	@ (8001c90 <HAL_RCC_OscConfig+0x278>)
 8001b58:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b5a:	4b4e      	ldr	r3, [pc, #312]	@ (8001c94 <HAL_RCC_OscConfig+0x27c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff fbe6 	bl	8001330 <HAL_InitTick>
 8001b64:	4603      	mov	r3, r0
 8001b66:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b68:	7bfb      	ldrb	r3, [r7, #15]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d052      	beq.n	8001c14 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001b6e:	7bfb      	ldrb	r3, [r7, #15]
 8001b70:	e35e      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d032      	beq.n	8001be0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b7a:	4b43      	ldr	r3, [pc, #268]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a42      	ldr	r2, [pc, #264]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b86:	f7ff fc23 	bl	80013d0 <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b8e:	f7ff fc1f 	bl	80013d0 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e347      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ba0:	4b39      	ldr	r3, [pc, #228]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d0f0      	beq.n	8001b8e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bac:	4b36      	ldr	r3, [pc, #216]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a35      	ldr	r2, [pc, #212]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001bb2:	f043 0308 	orr.w	r3, r3, #8
 8001bb6:	6013      	str	r3, [r2, #0]
 8001bb8:	4b33      	ldr	r3, [pc, #204]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	4930      	ldr	r1, [pc, #192]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bca:	4b2f      	ldr	r3, [pc, #188]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	021b      	lsls	r3, r3, #8
 8001bd8:	492b      	ldr	r1, [pc, #172]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	604b      	str	r3, [r1, #4]
 8001bde:	e01a      	b.n	8001c16 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001be0:	4b29      	ldr	r3, [pc, #164]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a28      	ldr	r2, [pc, #160]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001be6:	f023 0301 	bic.w	r3, r3, #1
 8001bea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bec:	f7ff fbf0 	bl	80013d0 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bf4:	f7ff fbec 	bl	80013d0 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e314      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c06:	4b20      	ldr	r3, [pc, #128]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1f0      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x1dc>
 8001c12:	e000      	b.n	8001c16 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c14:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d073      	beq.n	8001d0a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	2b08      	cmp	r3, #8
 8001c26:	d005      	beq.n	8001c34 <HAL_RCC_OscConfig+0x21c>
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	2b0c      	cmp	r3, #12
 8001c2c:	d10e      	bne.n	8001c4c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	2b03      	cmp	r3, #3
 8001c32:	d10b      	bne.n	8001c4c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c34:	4b14      	ldr	r3, [pc, #80]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d063      	beq.n	8001d08 <HAL_RCC_OscConfig+0x2f0>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d15f      	bne.n	8001d08 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e2f1      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c54:	d106      	bne.n	8001c64 <HAL_RCC_OscConfig+0x24c>
 8001c56:	4b0c      	ldr	r3, [pc, #48]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a0b      	ldr	r2, [pc, #44]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001c5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	e025      	b.n	8001cb0 <HAL_RCC_OscConfig+0x298>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c6c:	d114      	bne.n	8001c98 <HAL_RCC_OscConfig+0x280>
 8001c6e:	4b06      	ldr	r3, [pc, #24]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a05      	ldr	r2, [pc, #20]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001c74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	4b03      	ldr	r3, [pc, #12]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a02      	ldr	r2, [pc, #8]	@ (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001c80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	e013      	b.n	8001cb0 <HAL_RCC_OscConfig+0x298>
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	08003bd0 	.word	0x08003bd0
 8001c90:	20000000 	.word	0x20000000
 8001c94:	20000004 	.word	0x20000004
 8001c98:	4ba0      	ldr	r3, [pc, #640]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a9f      	ldr	r2, [pc, #636]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001c9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ca2:	6013      	str	r3, [r2, #0]
 8001ca4:	4b9d      	ldr	r3, [pc, #628]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a9c      	ldr	r2, [pc, #624]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001caa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d013      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb8:	f7ff fb8a 	bl	80013d0 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc0:	f7ff fb86 	bl	80013d0 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b64      	cmp	r3, #100	@ 0x64
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e2ae      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cd2:	4b92      	ldr	r3, [pc, #584]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0f0      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x2a8>
 8001cde:	e014      	b.n	8001d0a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce0:	f7ff fb76 	bl	80013d0 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce8:	f7ff fb72 	bl	80013d0 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b64      	cmp	r3, #100	@ 0x64
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e29a      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cfa:	4b88      	ldr	r3, [pc, #544]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1f0      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x2d0>
 8001d06:	e000      	b.n	8001d0a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d060      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	2b04      	cmp	r3, #4
 8001d1a:	d005      	beq.n	8001d28 <HAL_RCC_OscConfig+0x310>
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	2b0c      	cmp	r3, #12
 8001d20:	d119      	bne.n	8001d56 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d116      	bne.n	8001d56 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d28:	4b7c      	ldr	r3, [pc, #496]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d005      	beq.n	8001d40 <HAL_RCC_OscConfig+0x328>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e277      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d40:	4b76      	ldr	r3, [pc, #472]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	061b      	lsls	r3, r3, #24
 8001d4e:	4973      	ldr	r1, [pc, #460]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001d50:	4313      	orrs	r3, r2
 8001d52:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d54:	e040      	b.n	8001dd8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d023      	beq.n	8001da6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d5e:	4b6f      	ldr	r3, [pc, #444]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a6e      	ldr	r2, [pc, #440]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001d64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6a:	f7ff fb31 	bl	80013d0 <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d72:	f7ff fb2d 	bl	80013d0 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e255      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d84:	4b65      	ldr	r3, [pc, #404]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0f0      	beq.n	8001d72 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d90:	4b62      	ldr	r3, [pc, #392]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	061b      	lsls	r3, r3, #24
 8001d9e:	495f      	ldr	r1, [pc, #380]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	604b      	str	r3, [r1, #4]
 8001da4:	e018      	b.n	8001dd8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001da6:	4b5d      	ldr	r3, [pc, #372]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a5c      	ldr	r2, [pc, #368]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001dac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001db0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db2:	f7ff fb0d 	bl	80013d0 <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001db8:	e008      	b.n	8001dcc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dba:	f7ff fb09 	bl	80013d0 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e231      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dcc:	4b53      	ldr	r3, [pc, #332]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d1f0      	bne.n	8001dba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0308 	and.w	r3, r3, #8
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d03c      	beq.n	8001e5e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d01c      	beq.n	8001e26 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dec:	4b4b      	ldr	r3, [pc, #300]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001df2:	4a4a      	ldr	r2, [pc, #296]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dfc:	f7ff fae8 	bl	80013d0 <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e04:	f7ff fae4 	bl	80013d0 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e20c      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e16:	4b41      	ldr	r3, [pc, #260]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001e18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0ef      	beq.n	8001e04 <HAL_RCC_OscConfig+0x3ec>
 8001e24:	e01b      	b.n	8001e5e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e26:	4b3d      	ldr	r3, [pc, #244]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001e28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e2c:	4a3b      	ldr	r2, [pc, #236]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001e2e:	f023 0301 	bic.w	r3, r3, #1
 8001e32:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e36:	f7ff facb 	bl	80013d0 <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e3e:	f7ff fac7 	bl	80013d0 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e1ef      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e50:	4b32      	ldr	r3, [pc, #200]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001e52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1ef      	bne.n	8001e3e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0304 	and.w	r3, r3, #4
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f000 80a6 	beq.w	8001fb8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e70:	4b2a      	ldr	r3, [pc, #168]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d10d      	bne.n	8001e98 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e7c:	4b27      	ldr	r3, [pc, #156]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e80:	4a26      	ldr	r2, [pc, #152]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001e82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e86:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e88:	4b24      	ldr	r3, [pc, #144]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e90:	60bb      	str	r3, [r7, #8]
 8001e92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e94:	2301      	movs	r3, #1
 8001e96:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e98:	4b21      	ldr	r3, [pc, #132]	@ (8001f20 <HAL_RCC_OscConfig+0x508>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d118      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8001f20 <HAL_RCC_OscConfig+0x508>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8001f20 <HAL_RCC_OscConfig+0x508>)
 8001eaa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eb0:	f7ff fa8e 	bl	80013d0 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eb8:	f7ff fa8a 	bl	80013d0 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e1b2      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eca:	4b15      	ldr	r3, [pc, #84]	@ (8001f20 <HAL_RCC_OscConfig+0x508>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d0f0      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d108      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x4d8>
 8001ede:	4b0f      	ldr	r3, [pc, #60]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ee4:	4a0d      	ldr	r2, [pc, #52]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001ee6:	f043 0301 	orr.w	r3, r3, #1
 8001eea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001eee:	e029      	b.n	8001f44 <HAL_RCC_OscConfig+0x52c>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	2b05      	cmp	r3, #5
 8001ef6:	d115      	bne.n	8001f24 <HAL_RCC_OscConfig+0x50c>
 8001ef8:	4b08      	ldr	r3, [pc, #32]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001efe:	4a07      	ldr	r2, [pc, #28]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001f00:	f043 0304 	orr.w	r3, r3, #4
 8001f04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f08:	4b04      	ldr	r3, [pc, #16]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f0e:	4a03      	ldr	r2, [pc, #12]	@ (8001f1c <HAL_RCC_OscConfig+0x504>)
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f18:	e014      	b.n	8001f44 <HAL_RCC_OscConfig+0x52c>
 8001f1a:	bf00      	nop
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40007000 	.word	0x40007000
 8001f24:	4b9a      	ldr	r3, [pc, #616]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 8001f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f2a:	4a99      	ldr	r2, [pc, #612]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 8001f2c:	f023 0301 	bic.w	r3, r3, #1
 8001f30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f34:	4b96      	ldr	r3, [pc, #600]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 8001f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f3a:	4a95      	ldr	r2, [pc, #596]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 8001f3c:	f023 0304 	bic.w	r3, r3, #4
 8001f40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d016      	beq.n	8001f7a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f4c:	f7ff fa40 	bl	80013d0 <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f52:	e00a      	b.n	8001f6a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f54:	f7ff fa3c 	bl	80013d0 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e162      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f6a:	4b89      	ldr	r3, [pc, #548]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 8001f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0ed      	beq.n	8001f54 <HAL_RCC_OscConfig+0x53c>
 8001f78:	e015      	b.n	8001fa6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f7a:	f7ff fa29 	bl	80013d0 <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f80:	e00a      	b.n	8001f98 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f82:	f7ff fa25 	bl	80013d0 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e14b      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f98:	4b7d      	ldr	r3, [pc, #500]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 8001f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1ed      	bne.n	8001f82 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fa6:	7ffb      	ldrb	r3, [r7, #31]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d105      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fac:	4b78      	ldr	r3, [pc, #480]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 8001fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb0:	4a77      	ldr	r2, [pc, #476]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 8001fb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fb6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0320 	and.w	r3, r3, #32
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d03c      	beq.n	800203e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d01c      	beq.n	8002006 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001fcc:	4b70      	ldr	r3, [pc, #448]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 8001fce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001fd2:	4a6f      	ldr	r2, [pc, #444]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fdc:	f7ff f9f8 	bl	80013d0 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fe4:	f7ff f9f4 	bl	80013d0 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e11c      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ff6:	4b66      	ldr	r3, [pc, #408]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 8001ff8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d0ef      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x5cc>
 8002004:	e01b      	b.n	800203e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002006:	4b62      	ldr	r3, [pc, #392]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 8002008:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800200c:	4a60      	ldr	r2, [pc, #384]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 800200e:	f023 0301 	bic.w	r3, r3, #1
 8002012:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002016:	f7ff f9db 	bl	80013d0 <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800201e:	f7ff f9d7 	bl	80013d0 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e0ff      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002030:	4b57      	ldr	r3, [pc, #348]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 8002032:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1ef      	bne.n	800201e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002042:	2b00      	cmp	r3, #0
 8002044:	f000 80f3 	beq.w	800222e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800204c:	2b02      	cmp	r3, #2
 800204e:	f040 80c9 	bne.w	80021e4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002052:	4b4f      	ldr	r3, [pc, #316]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	f003 0203 	and.w	r2, r3, #3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002062:	429a      	cmp	r2, r3
 8002064:	d12c      	bne.n	80020c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002070:	3b01      	subs	r3, #1
 8002072:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002074:	429a      	cmp	r2, r3
 8002076:	d123      	bne.n	80020c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002082:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002084:	429a      	cmp	r2, r3
 8002086:	d11b      	bne.n	80020c0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002092:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002094:	429a      	cmp	r2, r3
 8002096:	d113      	bne.n	80020c0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020a2:	085b      	lsrs	r3, r3, #1
 80020a4:	3b01      	subs	r3, #1
 80020a6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d109      	bne.n	80020c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b6:	085b      	lsrs	r3, r3, #1
 80020b8:	3b01      	subs	r3, #1
 80020ba:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020bc:	429a      	cmp	r2, r3
 80020be:	d06b      	beq.n	8002198 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	2b0c      	cmp	r3, #12
 80020c4:	d062      	beq.n	800218c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020c6:	4b32      	ldr	r3, [pc, #200]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e0ac      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80020d6:	4b2e      	ldr	r3, [pc, #184]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a2d      	ldr	r2, [pc, #180]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 80020dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020e0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020e2:	f7ff f975 	bl	80013d0 <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020e8:	e008      	b.n	80020fc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ea:	f7ff f971 	bl	80013d0 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e099      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020fc:	4b24      	ldr	r3, [pc, #144]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1f0      	bne.n	80020ea <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002108:	4b21      	ldr	r3, [pc, #132]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 800210a:	68da      	ldr	r2, [r3, #12]
 800210c:	4b21      	ldr	r3, [pc, #132]	@ (8002194 <HAL_RCC_OscConfig+0x77c>)
 800210e:	4013      	ands	r3, r2
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002118:	3a01      	subs	r2, #1
 800211a:	0112      	lsls	r2, r2, #4
 800211c:	4311      	orrs	r1, r2
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002122:	0212      	lsls	r2, r2, #8
 8002124:	4311      	orrs	r1, r2
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800212a:	0852      	lsrs	r2, r2, #1
 800212c:	3a01      	subs	r2, #1
 800212e:	0552      	lsls	r2, r2, #21
 8002130:	4311      	orrs	r1, r2
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002136:	0852      	lsrs	r2, r2, #1
 8002138:	3a01      	subs	r2, #1
 800213a:	0652      	lsls	r2, r2, #25
 800213c:	4311      	orrs	r1, r2
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002142:	06d2      	lsls	r2, r2, #27
 8002144:	430a      	orrs	r2, r1
 8002146:	4912      	ldr	r1, [pc, #72]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 8002148:	4313      	orrs	r3, r2
 800214a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800214c:	4b10      	ldr	r3, [pc, #64]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a0f      	ldr	r2, [pc, #60]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 8002152:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002156:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002158:	4b0d      	ldr	r3, [pc, #52]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	4a0c      	ldr	r2, [pc, #48]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 800215e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002162:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002164:	f7ff f934 	bl	80013d0 <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800216c:	f7ff f930 	bl	80013d0 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e058      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800217e:	4b04      	ldr	r3, [pc, #16]	@ (8002190 <HAL_RCC_OscConfig+0x778>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0f0      	beq.n	800216c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800218a:	e050      	b.n	800222e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e04f      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
 8002190:	40021000 	.word	0x40021000
 8002194:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002198:	4b27      	ldr	r3, [pc, #156]	@ (8002238 <HAL_RCC_OscConfig+0x820>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d144      	bne.n	800222e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021a4:	4b24      	ldr	r3, [pc, #144]	@ (8002238 <HAL_RCC_OscConfig+0x820>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a23      	ldr	r2, [pc, #140]	@ (8002238 <HAL_RCC_OscConfig+0x820>)
 80021aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021b0:	4b21      	ldr	r3, [pc, #132]	@ (8002238 <HAL_RCC_OscConfig+0x820>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	4a20      	ldr	r2, [pc, #128]	@ (8002238 <HAL_RCC_OscConfig+0x820>)
 80021b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021bc:	f7ff f908 	bl	80013d0 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c4:	f7ff f904 	bl	80013d0 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e02c      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021d6:	4b18      	ldr	r3, [pc, #96]	@ (8002238 <HAL_RCC_OscConfig+0x820>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0f0      	beq.n	80021c4 <HAL_RCC_OscConfig+0x7ac>
 80021e2:	e024      	b.n	800222e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	2b0c      	cmp	r3, #12
 80021e8:	d01f      	beq.n	800222a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ea:	4b13      	ldr	r3, [pc, #76]	@ (8002238 <HAL_RCC_OscConfig+0x820>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a12      	ldr	r2, [pc, #72]	@ (8002238 <HAL_RCC_OscConfig+0x820>)
 80021f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f6:	f7ff f8eb 	bl	80013d0 <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021fe:	f7ff f8e7 	bl	80013d0 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e00f      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002210:	4b09      	ldr	r3, [pc, #36]	@ (8002238 <HAL_RCC_OscConfig+0x820>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1f0      	bne.n	80021fe <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800221c:	4b06      	ldr	r3, [pc, #24]	@ (8002238 <HAL_RCC_OscConfig+0x820>)
 800221e:	68da      	ldr	r2, [r3, #12]
 8002220:	4905      	ldr	r1, [pc, #20]	@ (8002238 <HAL_RCC_OscConfig+0x820>)
 8002222:	4b06      	ldr	r3, [pc, #24]	@ (800223c <HAL_RCC_OscConfig+0x824>)
 8002224:	4013      	ands	r3, r2
 8002226:	60cb      	str	r3, [r1, #12]
 8002228:	e001      	b.n	800222e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e000      	b.n	8002230 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3720      	adds	r7, #32
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40021000 	.word	0x40021000
 800223c:	feeefffc 	.word	0xfeeefffc

08002240 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e0e7      	b.n	8002424 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002254:	4b75      	ldr	r3, [pc, #468]	@ (800242c <HAL_RCC_ClockConfig+0x1ec>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	429a      	cmp	r2, r3
 8002260:	d910      	bls.n	8002284 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002262:	4b72      	ldr	r3, [pc, #456]	@ (800242c <HAL_RCC_ClockConfig+0x1ec>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f023 0207 	bic.w	r2, r3, #7
 800226a:	4970      	ldr	r1, [pc, #448]	@ (800242c <HAL_RCC_ClockConfig+0x1ec>)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	4313      	orrs	r3, r2
 8002270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002272:	4b6e      	ldr	r3, [pc, #440]	@ (800242c <HAL_RCC_ClockConfig+0x1ec>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	429a      	cmp	r2, r3
 800227e:	d001      	beq.n	8002284 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e0cf      	b.n	8002424 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d010      	beq.n	80022b2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	4b66      	ldr	r3, [pc, #408]	@ (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800229c:	429a      	cmp	r2, r3
 800229e:	d908      	bls.n	80022b2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a0:	4b63      	ldr	r3, [pc, #396]	@ (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	4960      	ldr	r1, [pc, #384]	@ (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d04c      	beq.n	8002358 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b03      	cmp	r3, #3
 80022c4:	d107      	bne.n	80022d6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022c6:	4b5a      	ldr	r3, [pc, #360]	@ (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d121      	bne.n	8002316 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e0a6      	b.n	8002424 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d107      	bne.n	80022ee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022de:	4b54      	ldr	r3, [pc, #336]	@ (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d115      	bne.n	8002316 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e09a      	b.n	8002424 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d107      	bne.n	8002306 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022f6:	4b4e      	ldr	r3, [pc, #312]	@ (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d109      	bne.n	8002316 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e08e      	b.n	8002424 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002306:	4b4a      	ldr	r3, [pc, #296]	@ (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e086      	b.n	8002424 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002316:	4b46      	ldr	r3, [pc, #280]	@ (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f023 0203 	bic.w	r2, r3, #3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	4943      	ldr	r1, [pc, #268]	@ (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 8002324:	4313      	orrs	r3, r2
 8002326:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002328:	f7ff f852 	bl	80013d0 <HAL_GetTick>
 800232c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800232e:	e00a      	b.n	8002346 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002330:	f7ff f84e 	bl	80013d0 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800233e:	4293      	cmp	r3, r2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e06e      	b.n	8002424 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002346:	4b3a      	ldr	r3, [pc, #232]	@ (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 020c 	and.w	r2, r3, #12
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	429a      	cmp	r2, r3
 8002356:	d1eb      	bne.n	8002330 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d010      	beq.n	8002386 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	4b31      	ldr	r3, [pc, #196]	@ (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002370:	429a      	cmp	r2, r3
 8002372:	d208      	bcs.n	8002386 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002374:	4b2e      	ldr	r3, [pc, #184]	@ (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	492b      	ldr	r1, [pc, #172]	@ (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 8002382:	4313      	orrs	r3, r2
 8002384:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002386:	4b29      	ldr	r3, [pc, #164]	@ (800242c <HAL_RCC_ClockConfig+0x1ec>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	429a      	cmp	r2, r3
 8002392:	d210      	bcs.n	80023b6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002394:	4b25      	ldr	r3, [pc, #148]	@ (800242c <HAL_RCC_ClockConfig+0x1ec>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f023 0207 	bic.w	r2, r3, #7
 800239c:	4923      	ldr	r1, [pc, #140]	@ (800242c <HAL_RCC_ClockConfig+0x1ec>)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a4:	4b21      	ldr	r3, [pc, #132]	@ (800242c <HAL_RCC_ClockConfig+0x1ec>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d001      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e036      	b.n	8002424 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0304 	and.w	r3, r3, #4
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d008      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	4918      	ldr	r1, [pc, #96]	@ (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0308 	and.w	r3, r3, #8
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d009      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023e0:	4b13      	ldr	r3, [pc, #76]	@ (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	4910      	ldr	r1, [pc, #64]	@ (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023f4:	f000 f824 	bl	8002440 <HAL_RCC_GetSysClockFreq>
 80023f8:	4602      	mov	r2, r0
 80023fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	091b      	lsrs	r3, r3, #4
 8002400:	f003 030f 	and.w	r3, r3, #15
 8002404:	490b      	ldr	r1, [pc, #44]	@ (8002434 <HAL_RCC_ClockConfig+0x1f4>)
 8002406:	5ccb      	ldrb	r3, [r1, r3]
 8002408:	f003 031f 	and.w	r3, r3, #31
 800240c:	fa22 f303 	lsr.w	r3, r2, r3
 8002410:	4a09      	ldr	r2, [pc, #36]	@ (8002438 <HAL_RCC_ClockConfig+0x1f8>)
 8002412:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002414:	4b09      	ldr	r3, [pc, #36]	@ (800243c <HAL_RCC_ClockConfig+0x1fc>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4618      	mov	r0, r3
 800241a:	f7fe ff89 	bl	8001330 <HAL_InitTick>
 800241e:	4603      	mov	r3, r0
 8002420:	72fb      	strb	r3, [r7, #11]

  return status;
 8002422:	7afb      	ldrb	r3, [r7, #11]
}
 8002424:	4618      	mov	r0, r3
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40022000 	.word	0x40022000
 8002430:	40021000 	.word	0x40021000
 8002434:	08003bd0 	.word	0x08003bd0
 8002438:	20000000 	.word	0x20000000
 800243c:	20000004 	.word	0x20000004

08002440 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002440:	b480      	push	{r7}
 8002442:	b089      	sub	sp, #36	@ 0x24
 8002444:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002446:	2300      	movs	r3, #0
 8002448:	61fb      	str	r3, [r7, #28]
 800244a:	2300      	movs	r3, #0
 800244c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800244e:	4b3e      	ldr	r3, [pc, #248]	@ (8002548 <HAL_RCC_GetSysClockFreq+0x108>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002458:	4b3b      	ldr	r3, [pc, #236]	@ (8002548 <HAL_RCC_GetSysClockFreq+0x108>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	f003 0303 	and.w	r3, r3, #3
 8002460:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d005      	beq.n	8002474 <HAL_RCC_GetSysClockFreq+0x34>
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	2b0c      	cmp	r3, #12
 800246c:	d121      	bne.n	80024b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d11e      	bne.n	80024b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002474:	4b34      	ldr	r3, [pc, #208]	@ (8002548 <HAL_RCC_GetSysClockFreq+0x108>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0308 	and.w	r3, r3, #8
 800247c:	2b00      	cmp	r3, #0
 800247e:	d107      	bne.n	8002490 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002480:	4b31      	ldr	r3, [pc, #196]	@ (8002548 <HAL_RCC_GetSysClockFreq+0x108>)
 8002482:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002486:	0a1b      	lsrs	r3, r3, #8
 8002488:	f003 030f 	and.w	r3, r3, #15
 800248c:	61fb      	str	r3, [r7, #28]
 800248e:	e005      	b.n	800249c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002490:	4b2d      	ldr	r3, [pc, #180]	@ (8002548 <HAL_RCC_GetSysClockFreq+0x108>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	091b      	lsrs	r3, r3, #4
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800249c:	4a2b      	ldr	r2, [pc, #172]	@ (800254c <HAL_RCC_GetSysClockFreq+0x10c>)
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10d      	bne.n	80024c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024b0:	e00a      	b.n	80024c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d102      	bne.n	80024be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024b8:	4b25      	ldr	r3, [pc, #148]	@ (8002550 <HAL_RCC_GetSysClockFreq+0x110>)
 80024ba:	61bb      	str	r3, [r7, #24]
 80024bc:	e004      	b.n	80024c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	d101      	bne.n	80024c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024c4:	4b23      	ldr	r3, [pc, #140]	@ (8002554 <HAL_RCC_GetSysClockFreq+0x114>)
 80024c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	2b0c      	cmp	r3, #12
 80024cc:	d134      	bne.n	8002538 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002548 <HAL_RCC_GetSysClockFreq+0x108>)
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	f003 0303 	and.w	r3, r3, #3
 80024d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d003      	beq.n	80024e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	2b03      	cmp	r3, #3
 80024e2:	d003      	beq.n	80024ec <HAL_RCC_GetSysClockFreq+0xac>
 80024e4:	e005      	b.n	80024f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80024e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002550 <HAL_RCC_GetSysClockFreq+0x110>)
 80024e8:	617b      	str	r3, [r7, #20]
      break;
 80024ea:	e005      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80024ec:	4b19      	ldr	r3, [pc, #100]	@ (8002554 <HAL_RCC_GetSysClockFreq+0x114>)
 80024ee:	617b      	str	r3, [r7, #20]
      break;
 80024f0:	e002      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	617b      	str	r3, [r7, #20]
      break;
 80024f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024f8:	4b13      	ldr	r3, [pc, #76]	@ (8002548 <HAL_RCC_GetSysClockFreq+0x108>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	091b      	lsrs	r3, r3, #4
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	3301      	adds	r3, #1
 8002504:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002506:	4b10      	ldr	r3, [pc, #64]	@ (8002548 <HAL_RCC_GetSysClockFreq+0x108>)
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	0a1b      	lsrs	r3, r3, #8
 800250c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	fb03 f202 	mul.w	r2, r3, r2
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	fbb2 f3f3 	udiv	r3, r2, r3
 800251c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800251e:	4b0a      	ldr	r3, [pc, #40]	@ (8002548 <HAL_RCC_GetSysClockFreq+0x108>)
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	0e5b      	lsrs	r3, r3, #25
 8002524:	f003 0303 	and.w	r3, r3, #3
 8002528:	3301      	adds	r3, #1
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	fbb2 f3f3 	udiv	r3, r2, r3
 8002536:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002538:	69bb      	ldr	r3, [r7, #24]
}
 800253a:	4618      	mov	r0, r3
 800253c:	3724      	adds	r7, #36	@ 0x24
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	40021000 	.word	0x40021000
 800254c:	08003be8 	.word	0x08003be8
 8002550:	00f42400 	.word	0x00f42400
 8002554:	007a1200 	.word	0x007a1200

08002558 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800255c:	4b03      	ldr	r3, [pc, #12]	@ (800256c <HAL_RCC_GetHCLKFreq+0x14>)
 800255e:	681b      	ldr	r3, [r3, #0]
}
 8002560:	4618      	mov	r0, r3
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	20000000 	.word	0x20000000

08002570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002574:	f7ff fff0 	bl	8002558 <HAL_RCC_GetHCLKFreq>
 8002578:	4602      	mov	r2, r0
 800257a:	4b06      	ldr	r3, [pc, #24]	@ (8002594 <HAL_RCC_GetPCLK1Freq+0x24>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	0a1b      	lsrs	r3, r3, #8
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	4904      	ldr	r1, [pc, #16]	@ (8002598 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002586:	5ccb      	ldrb	r3, [r1, r3]
 8002588:	f003 031f 	and.w	r3, r3, #31
 800258c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002590:	4618      	mov	r0, r3
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40021000 	.word	0x40021000
 8002598:	08003be0 	.word	0x08003be0

0800259c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80025a0:	f7ff ffda 	bl	8002558 <HAL_RCC_GetHCLKFreq>
 80025a4:	4602      	mov	r2, r0
 80025a6:	4b06      	ldr	r3, [pc, #24]	@ (80025c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	0adb      	lsrs	r3, r3, #11
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	4904      	ldr	r1, [pc, #16]	@ (80025c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025b2:	5ccb      	ldrb	r3, [r1, r3]
 80025b4:	f003 031f 	and.w	r3, r3, #31
 80025b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025bc:	4618      	mov	r0, r3
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40021000 	.word	0x40021000
 80025c4:	08003be0 	.word	0x08003be0

080025c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025d0:	2300      	movs	r3, #0
 80025d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025d4:	4b2a      	ldr	r3, [pc, #168]	@ (8002680 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80025e0:	f7ff f9b6 	bl	8001950 <HAL_PWREx_GetVoltageRange>
 80025e4:	6178      	str	r0, [r7, #20]
 80025e6:	e014      	b.n	8002612 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025e8:	4b25      	ldr	r3, [pc, #148]	@ (8002680 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ec:	4a24      	ldr	r2, [pc, #144]	@ (8002680 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80025f4:	4b22      	ldr	r3, [pc, #136]	@ (8002680 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002600:	f7ff f9a6 	bl	8001950 <HAL_PWREx_GetVoltageRange>
 8002604:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002606:	4b1e      	ldr	r3, [pc, #120]	@ (8002680 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800260a:	4a1d      	ldr	r2, [pc, #116]	@ (8002680 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800260c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002610:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002618:	d10b      	bne.n	8002632 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b80      	cmp	r3, #128	@ 0x80
 800261e:	d919      	bls.n	8002654 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2ba0      	cmp	r3, #160	@ 0xa0
 8002624:	d902      	bls.n	800262c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002626:	2302      	movs	r3, #2
 8002628:	613b      	str	r3, [r7, #16]
 800262a:	e013      	b.n	8002654 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800262c:	2301      	movs	r3, #1
 800262e:	613b      	str	r3, [r7, #16]
 8002630:	e010      	b.n	8002654 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b80      	cmp	r3, #128	@ 0x80
 8002636:	d902      	bls.n	800263e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002638:	2303      	movs	r3, #3
 800263a:	613b      	str	r3, [r7, #16]
 800263c:	e00a      	b.n	8002654 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b80      	cmp	r3, #128	@ 0x80
 8002642:	d102      	bne.n	800264a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002644:	2302      	movs	r3, #2
 8002646:	613b      	str	r3, [r7, #16]
 8002648:	e004      	b.n	8002654 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b70      	cmp	r3, #112	@ 0x70
 800264e:	d101      	bne.n	8002654 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002650:	2301      	movs	r3, #1
 8002652:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002654:	4b0b      	ldr	r3, [pc, #44]	@ (8002684 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f023 0207 	bic.w	r2, r3, #7
 800265c:	4909      	ldr	r1, [pc, #36]	@ (8002684 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	4313      	orrs	r3, r2
 8002662:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002664:	4b07      	ldr	r3, [pc, #28]	@ (8002684 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	429a      	cmp	r2, r3
 8002670:	d001      	beq.n	8002676 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e000      	b.n	8002678 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3718      	adds	r7, #24
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40021000 	.word	0x40021000
 8002684:	40022000 	.word	0x40022000

08002688 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002690:	2300      	movs	r3, #0
 8002692:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002694:	2300      	movs	r3, #0
 8002696:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d031      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026a8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80026ac:	d01a      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80026ae:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80026b2:	d814      	bhi.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x56>
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d009      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80026b8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80026bc:	d10f      	bne.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80026be:	4b5d      	ldr	r3, [pc, #372]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	4a5c      	ldr	r2, [pc, #368]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026c8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026ca:	e00c      	b.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3304      	adds	r3, #4
 80026d0:	2100      	movs	r1, #0
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 f9de 	bl	8002a94 <RCCEx_PLLSAI1_Config>
 80026d8:	4603      	mov	r3, r0
 80026da:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026dc:	e003      	b.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	74fb      	strb	r3, [r7, #19]
      break;
 80026e2:	e000      	b.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80026e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026e6:	7cfb      	ldrb	r3, [r7, #19]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d10b      	bne.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026ec:	4b51      	ldr	r3, [pc, #324]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026f2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026fa:	494e      	ldr	r1, [pc, #312]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002702:	e001      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002704:	7cfb      	ldrb	r3, [r7, #19]
 8002706:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002710:	2b00      	cmp	r3, #0
 8002712:	f000 809e 	beq.w	8002852 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002716:	2300      	movs	r3, #0
 8002718:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800271a:	4b46      	ldr	r3, [pc, #280]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800271c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800271e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002726:	2301      	movs	r3, #1
 8002728:	e000      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800272a:	2300      	movs	r3, #0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00d      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002730:	4b40      	ldr	r3, [pc, #256]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002734:	4a3f      	ldr	r2, [pc, #252]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002736:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800273a:	6593      	str	r3, [r2, #88]	@ 0x58
 800273c:	4b3d      	ldr	r3, [pc, #244]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800273e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002740:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002748:	2301      	movs	r3, #1
 800274a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800274c:	4b3a      	ldr	r3, [pc, #232]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a39      	ldr	r2, [pc, #228]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002752:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002756:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002758:	f7fe fe3a 	bl	80013d0 <HAL_GetTick>
 800275c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800275e:	e009      	b.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002760:	f7fe fe36 	bl	80013d0 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d902      	bls.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	74fb      	strb	r3, [r7, #19]
        break;
 8002772:	e005      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002774:	4b30      	ldr	r3, [pc, #192]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0ef      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002780:	7cfb      	ldrb	r3, [r7, #19]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d15a      	bne.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002786:	4b2b      	ldr	r3, [pc, #172]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002788:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800278c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002790:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d01e      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d019      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027a2:	4b24      	ldr	r3, [pc, #144]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027ac:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027ae:	4b21      	ldr	r3, [pc, #132]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027b4:	4a1f      	ldr	r2, [pc, #124]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027be:	4b1d      	ldr	r3, [pc, #116]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027c4:	4a1b      	ldr	r2, [pc, #108]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027ce:	4a19      	ldr	r2, [pc, #100]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d016      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e0:	f7fe fdf6 	bl	80013d0 <HAL_GetTick>
 80027e4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027e6:	e00b      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027e8:	f7fe fdf2 	bl	80013d0 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d902      	bls.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	74fb      	strb	r3, [r7, #19]
            break;
 80027fe:	e006      	b.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002800:	4b0c      	ldr	r3, [pc, #48]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0ec      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800280e:	7cfb      	ldrb	r3, [r7, #19]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10b      	bne.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002814:	4b07      	ldr	r3, [pc, #28]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800281a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002822:	4904      	ldr	r1, [pc, #16]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002824:	4313      	orrs	r3, r2
 8002826:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800282a:	e009      	b.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800282c:	7cfb      	ldrb	r3, [r7, #19]
 800282e:	74bb      	strb	r3, [r7, #18]
 8002830:	e006      	b.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002832:	bf00      	nop
 8002834:	40021000 	.word	0x40021000
 8002838:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800283c:	7cfb      	ldrb	r3, [r7, #19]
 800283e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002840:	7c7b      	ldrb	r3, [r7, #17]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d105      	bne.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002846:	4b8a      	ldr	r3, [pc, #552]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800284a:	4a89      	ldr	r2, [pc, #548]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800284c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002850:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00a      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800285e:	4b84      	ldr	r3, [pc, #528]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002860:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002864:	f023 0203 	bic.w	r2, r3, #3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	4980      	ldr	r1, [pc, #512]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800286e:	4313      	orrs	r3, r2
 8002870:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00a      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002880:	4b7b      	ldr	r3, [pc, #492]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002886:	f023 020c 	bic.w	r2, r3, #12
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288e:	4978      	ldr	r1, [pc, #480]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002890:	4313      	orrs	r3, r2
 8002892:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0320 	and.w	r3, r3, #32
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00a      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028a2:	4b73      	ldr	r3, [pc, #460]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028a8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b0:	496f      	ldr	r1, [pc, #444]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00a      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028c4:	4b6a      	ldr	r3, [pc, #424]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ca:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028d2:	4967      	ldr	r1, [pc, #412]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00a      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80028e6:	4b62      	ldr	r3, [pc, #392]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ec:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028f4:	495e      	ldr	r1, [pc, #376]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00a      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002908:	4b59      	ldr	r3, [pc, #356]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800290a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800290e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002916:	4956      	ldr	r1, [pc, #344]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002918:	4313      	orrs	r3, r2
 800291a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00a      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800292a:	4b51      	ldr	r3, [pc, #324]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800292c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002930:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002938:	494d      	ldr	r1, [pc, #308]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800293a:	4313      	orrs	r3, r2
 800293c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d028      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800294c:	4b48      	ldr	r3, [pc, #288]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800294e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002952:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295a:	4945      	ldr	r1, [pc, #276]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800295c:	4313      	orrs	r3, r2
 800295e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002966:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800296a:	d106      	bne.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800296c:	4b40      	ldr	r3, [pc, #256]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	4a3f      	ldr	r2, [pc, #252]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002972:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002976:	60d3      	str	r3, [r2, #12]
 8002978:	e011      	b.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002982:	d10c      	bne.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3304      	adds	r3, #4
 8002988:	2101      	movs	r1, #1
 800298a:	4618      	mov	r0, r3
 800298c:	f000 f882 	bl	8002a94 <RCCEx_PLLSAI1_Config>
 8002990:	4603      	mov	r3, r0
 8002992:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002994:	7cfb      	ldrb	r3, [r7, #19]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800299a:	7cfb      	ldrb	r3, [r7, #19]
 800299c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d028      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029aa:	4b31      	ldr	r3, [pc, #196]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029b0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b8:	492d      	ldr	r1, [pc, #180]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029c8:	d106      	bne.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029ca:	4b29      	ldr	r3, [pc, #164]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	4a28      	ldr	r2, [pc, #160]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029d0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029d4:	60d3      	str	r3, [r2, #12]
 80029d6:	e011      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80029e0:	d10c      	bne.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	3304      	adds	r3, #4
 80029e6:	2101      	movs	r1, #1
 80029e8:	4618      	mov	r0, r3
 80029ea:	f000 f853 	bl	8002a94 <RCCEx_PLLSAI1_Config>
 80029ee:	4603      	mov	r3, r0
 80029f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029f2:	7cfb      	ldrb	r3, [r7, #19]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80029f8:	7cfb      	ldrb	r3, [r7, #19]
 80029fa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d01c      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a08:	4b19      	ldr	r3, [pc, #100]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a0e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a16:	4916      	ldr	r1, [pc, #88]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a26:	d10c      	bne.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3304      	adds	r3, #4
 8002a2c:	2102      	movs	r1, #2
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f000 f830 	bl	8002a94 <RCCEx_PLLSAI1_Config>
 8002a34:	4603      	mov	r3, r0
 8002a36:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a38:	7cfb      	ldrb	r3, [r7, #19]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002a3e:	7cfb      	ldrb	r3, [r7, #19]
 8002a40:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00a      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a4e:	4b08      	ldr	r3, [pc, #32]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a54:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a5c:	4904      	ldr	r1, [pc, #16]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a64:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3718      	adds	r7, #24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40021000 	.word	0x40021000

08002a74 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002a78:	4b05      	ldr	r3, [pc, #20]	@ (8002a90 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a04      	ldr	r2, [pc, #16]	@ (8002a90 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002a7e:	f043 0304 	orr.w	r3, r3, #4
 8002a82:	6013      	str	r3, [r2, #0]
}
 8002a84:	bf00      	nop
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	40021000 	.word	0x40021000

08002a94 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002aa2:	4b74      	ldr	r3, [pc, #464]	@ (8002c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	f003 0303 	and.w	r3, r3, #3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d018      	beq.n	8002ae0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002aae:	4b71      	ldr	r3, [pc, #452]	@ (8002c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	f003 0203 	and.w	r2, r3, #3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d10d      	bne.n	8002ada <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
       ||
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d009      	beq.n	8002ada <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002ac6:	4b6b      	ldr	r3, [pc, #428]	@ (8002c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	091b      	lsrs	r3, r3, #4
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	1c5a      	adds	r2, r3, #1
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
       ||
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d047      	beq.n	8002b6a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	73fb      	strb	r3, [r7, #15]
 8002ade:	e044      	b.n	8002b6a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2b03      	cmp	r3, #3
 8002ae6:	d018      	beq.n	8002b1a <RCCEx_PLLSAI1_Config+0x86>
 8002ae8:	2b03      	cmp	r3, #3
 8002aea:	d825      	bhi.n	8002b38 <RCCEx_PLLSAI1_Config+0xa4>
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d002      	beq.n	8002af6 <RCCEx_PLLSAI1_Config+0x62>
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d009      	beq.n	8002b08 <RCCEx_PLLSAI1_Config+0x74>
 8002af4:	e020      	b.n	8002b38 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002af6:	4b5f      	ldr	r3, [pc, #380]	@ (8002c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d11d      	bne.n	8002b3e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b06:	e01a      	b.n	8002b3e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b08:	4b5a      	ldr	r3, [pc, #360]	@ (8002c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d116      	bne.n	8002b42 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b18:	e013      	b.n	8002b42 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b1a:	4b56      	ldr	r3, [pc, #344]	@ (8002c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10f      	bne.n	8002b46 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b26:	4b53      	ldr	r3, [pc, #332]	@ (8002c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d109      	bne.n	8002b46 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b36:	e006      	b.n	8002b46 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b3c:	e004      	b.n	8002b48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b3e:	bf00      	nop
 8002b40:	e002      	b.n	8002b48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b42:	bf00      	nop
 8002b44:	e000      	b.n	8002b48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b46:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b48:	7bfb      	ldrb	r3, [r7, #15]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10d      	bne.n	8002b6a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b4e:	4b49      	ldr	r3, [pc, #292]	@ (8002c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6819      	ldr	r1, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	011b      	lsls	r3, r3, #4
 8002b62:	430b      	orrs	r3, r1
 8002b64:	4943      	ldr	r1, [pc, #268]	@ (8002c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b6a:	7bfb      	ldrb	r3, [r7, #15]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d17c      	bne.n	8002c6a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b70:	4b40      	ldr	r3, [pc, #256]	@ (8002c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a3f      	ldr	r2, [pc, #252]	@ (8002c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b76:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002b7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b7c:	f7fe fc28 	bl	80013d0 <HAL_GetTick>
 8002b80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b82:	e009      	b.n	8002b98 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b84:	f7fe fc24 	bl	80013d0 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d902      	bls.n	8002b98 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	73fb      	strb	r3, [r7, #15]
        break;
 8002b96:	e005      	b.n	8002ba4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b98:	4b36      	ldr	r3, [pc, #216]	@ (8002c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1ef      	bne.n	8002b84 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ba4:	7bfb      	ldrb	r3, [r7, #15]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d15f      	bne.n	8002c6a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d110      	bne.n	8002bd2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bb0:	4b30      	ldr	r3, [pc, #192]	@ (8002c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002bb8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	6892      	ldr	r2, [r2, #8]
 8002bc0:	0211      	lsls	r1, r2, #8
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	68d2      	ldr	r2, [r2, #12]
 8002bc6:	06d2      	lsls	r2, r2, #27
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	492a      	ldr	r1, [pc, #168]	@ (8002c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	610b      	str	r3, [r1, #16]
 8002bd0:	e027      	b.n	8002c22 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d112      	bne.n	8002bfe <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bd8:	4b26      	ldr	r3, [pc, #152]	@ (8002c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002be0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	6892      	ldr	r2, [r2, #8]
 8002be8:	0211      	lsls	r1, r2, #8
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	6912      	ldr	r2, [r2, #16]
 8002bee:	0852      	lsrs	r2, r2, #1
 8002bf0:	3a01      	subs	r2, #1
 8002bf2:	0552      	lsls	r2, r2, #21
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	491f      	ldr	r1, [pc, #124]	@ (8002c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	610b      	str	r3, [r1, #16]
 8002bfc:	e011      	b.n	8002c22 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bfe:	4b1d      	ldr	r3, [pc, #116]	@ (8002c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002c06:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	6892      	ldr	r2, [r2, #8]
 8002c0e:	0211      	lsls	r1, r2, #8
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6952      	ldr	r2, [r2, #20]
 8002c14:	0852      	lsrs	r2, r2, #1
 8002c16:	3a01      	subs	r2, #1
 8002c18:	0652      	lsls	r2, r2, #25
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	4915      	ldr	r1, [pc, #84]	@ (8002c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c22:	4b14      	ldr	r3, [pc, #80]	@ (8002c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a13      	ldr	r2, [pc, #76]	@ (8002c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c28:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002c2c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c2e:	f7fe fbcf 	bl	80013d0 <HAL_GetTick>
 8002c32:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c34:	e009      	b.n	8002c4a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c36:	f7fe fbcb 	bl	80013d0 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d902      	bls.n	8002c4a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	73fb      	strb	r3, [r7, #15]
          break;
 8002c48:	e005      	b.n	8002c56 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0ef      	beq.n	8002c36 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002c56:	7bfb      	ldrb	r3, [r7, #15]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d106      	bne.n	8002c6a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c5c:	4b05      	ldr	r3, [pc, #20]	@ (8002c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c5e:	691a      	ldr	r2, [r3, #16]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	4903      	ldr	r1, [pc, #12]	@ (8002c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	40021000 	.word	0x40021000

08002c78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e049      	b.n	8002d1e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d106      	bne.n	8002ca4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7fe fa38 	bl	8001114 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3304      	adds	r3, #4
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4610      	mov	r0, r2
 8002cb8:	f000 f94c 	bl	8002f54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
	...

08002d28 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d001      	beq.n	8002d40 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e033      	b.n	8002da8 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2202      	movs	r2, #2
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a19      	ldr	r2, [pc, #100]	@ (8002db4 <HAL_TIM_Base_Start+0x8c>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d009      	beq.n	8002d66 <HAL_TIM_Base_Start+0x3e>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d5a:	d004      	beq.n	8002d66 <HAL_TIM_Base_Start+0x3e>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a15      	ldr	r2, [pc, #84]	@ (8002db8 <HAL_TIM_Base_Start+0x90>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d115      	bne.n	8002d92 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	4b13      	ldr	r3, [pc, #76]	@ (8002dbc <HAL_TIM_Base_Start+0x94>)
 8002d6e:	4013      	ands	r3, r2
 8002d70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2b06      	cmp	r3, #6
 8002d76:	d015      	beq.n	8002da4 <HAL_TIM_Base_Start+0x7c>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d7e:	d011      	beq.n	8002da4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 0201 	orr.w	r2, r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d90:	e008      	b.n	8002da4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f042 0201 	orr.w	r2, r2, #1
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	e000      	b.n	8002da6 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002da4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3714      	adds	r7, #20
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	40012c00 	.word	0x40012c00
 8002db8:	40014000 	.word	0x40014000
 8002dbc:	00010007 	.word	0x00010007

08002dc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d101      	bne.n	8002ddc <HAL_TIM_ConfigClockSource+0x1c>
 8002dd8:	2302      	movs	r3, #2
 8002dda:	e0b6      	b.n	8002f4a <HAL_TIM_ConfigClockSource+0x18a>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2202      	movs	r2, #2
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dfa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002dfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68ba      	ldr	r2, [r7, #8]
 8002e0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e18:	d03e      	beq.n	8002e98 <HAL_TIM_ConfigClockSource+0xd8>
 8002e1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e1e:	f200 8087 	bhi.w	8002f30 <HAL_TIM_ConfigClockSource+0x170>
 8002e22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e26:	f000 8086 	beq.w	8002f36 <HAL_TIM_ConfigClockSource+0x176>
 8002e2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e2e:	d87f      	bhi.n	8002f30 <HAL_TIM_ConfigClockSource+0x170>
 8002e30:	2b70      	cmp	r3, #112	@ 0x70
 8002e32:	d01a      	beq.n	8002e6a <HAL_TIM_ConfigClockSource+0xaa>
 8002e34:	2b70      	cmp	r3, #112	@ 0x70
 8002e36:	d87b      	bhi.n	8002f30 <HAL_TIM_ConfigClockSource+0x170>
 8002e38:	2b60      	cmp	r3, #96	@ 0x60
 8002e3a:	d050      	beq.n	8002ede <HAL_TIM_ConfigClockSource+0x11e>
 8002e3c:	2b60      	cmp	r3, #96	@ 0x60
 8002e3e:	d877      	bhi.n	8002f30 <HAL_TIM_ConfigClockSource+0x170>
 8002e40:	2b50      	cmp	r3, #80	@ 0x50
 8002e42:	d03c      	beq.n	8002ebe <HAL_TIM_ConfigClockSource+0xfe>
 8002e44:	2b50      	cmp	r3, #80	@ 0x50
 8002e46:	d873      	bhi.n	8002f30 <HAL_TIM_ConfigClockSource+0x170>
 8002e48:	2b40      	cmp	r3, #64	@ 0x40
 8002e4a:	d058      	beq.n	8002efe <HAL_TIM_ConfigClockSource+0x13e>
 8002e4c:	2b40      	cmp	r3, #64	@ 0x40
 8002e4e:	d86f      	bhi.n	8002f30 <HAL_TIM_ConfigClockSource+0x170>
 8002e50:	2b30      	cmp	r3, #48	@ 0x30
 8002e52:	d064      	beq.n	8002f1e <HAL_TIM_ConfigClockSource+0x15e>
 8002e54:	2b30      	cmp	r3, #48	@ 0x30
 8002e56:	d86b      	bhi.n	8002f30 <HAL_TIM_ConfigClockSource+0x170>
 8002e58:	2b20      	cmp	r3, #32
 8002e5a:	d060      	beq.n	8002f1e <HAL_TIM_ConfigClockSource+0x15e>
 8002e5c:	2b20      	cmp	r3, #32
 8002e5e:	d867      	bhi.n	8002f30 <HAL_TIM_ConfigClockSource+0x170>
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d05c      	beq.n	8002f1e <HAL_TIM_ConfigClockSource+0x15e>
 8002e64:	2b10      	cmp	r3, #16
 8002e66:	d05a      	beq.n	8002f1e <HAL_TIM_ConfigClockSource+0x15e>
 8002e68:	e062      	b.n	8002f30 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e7a:	f000 f955 	bl	8003128 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002e8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	609a      	str	r2, [r3, #8]
      break;
 8002e96:	e04f      	b.n	8002f38 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ea8:	f000 f93e 	bl	8003128 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689a      	ldr	r2, [r3, #8]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002eba:	609a      	str	r2, [r3, #8]
      break;
 8002ebc:	e03c      	b.n	8002f38 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eca:	461a      	mov	r2, r3
 8002ecc:	f000 f8b2 	bl	8003034 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2150      	movs	r1, #80	@ 0x50
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f000 f90b 	bl	80030f2 <TIM_ITRx_SetConfig>
      break;
 8002edc:	e02c      	b.n	8002f38 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002eea:	461a      	mov	r2, r3
 8002eec:	f000 f8d1 	bl	8003092 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2160      	movs	r1, #96	@ 0x60
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f000 f8fb 	bl	80030f2 <TIM_ITRx_SetConfig>
      break;
 8002efc:	e01c      	b.n	8002f38 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	f000 f892 	bl	8003034 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2140      	movs	r1, #64	@ 0x40
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 f8eb 	bl	80030f2 <TIM_ITRx_SetConfig>
      break;
 8002f1c:	e00c      	b.n	8002f38 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4619      	mov	r1, r3
 8002f28:	4610      	mov	r0, r2
 8002f2a:	f000 f8e2 	bl	80030f2 <TIM_ITRx_SetConfig>
      break;
 8002f2e:	e003      	b.n	8002f38 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	73fb      	strb	r3, [r7, #15]
      break;
 8002f34:	e000      	b.n	8002f38 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002f36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
	...

08002f54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a30      	ldr	r2, [pc, #192]	@ (8003028 <TIM_Base_SetConfig+0xd4>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d003      	beq.n	8002f74 <TIM_Base_SetConfig+0x20>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f72:	d108      	bne.n	8002f86 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a27      	ldr	r2, [pc, #156]	@ (8003028 <TIM_Base_SetConfig+0xd4>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d00b      	beq.n	8002fa6 <TIM_Base_SetConfig+0x52>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f94:	d007      	beq.n	8002fa6 <TIM_Base_SetConfig+0x52>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a24      	ldr	r2, [pc, #144]	@ (800302c <TIM_Base_SetConfig+0xd8>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d003      	beq.n	8002fa6 <TIM_Base_SetConfig+0x52>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a23      	ldr	r2, [pc, #140]	@ (8003030 <TIM_Base_SetConfig+0xdc>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d108      	bne.n	8002fb8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a12      	ldr	r2, [pc, #72]	@ (8003028 <TIM_Base_SetConfig+0xd4>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d007      	beq.n	8002ff4 <TIM_Base_SetConfig+0xa0>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a11      	ldr	r2, [pc, #68]	@ (800302c <TIM_Base_SetConfig+0xd8>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d003      	beq.n	8002ff4 <TIM_Base_SetConfig+0xa0>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a10      	ldr	r2, [pc, #64]	@ (8003030 <TIM_Base_SetConfig+0xdc>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d103      	bne.n	8002ffc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	691a      	ldr	r2, [r3, #16]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b01      	cmp	r3, #1
 800300c:	d105      	bne.n	800301a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	f023 0201 	bic.w	r2, r3, #1
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	611a      	str	r2, [r3, #16]
  }
}
 800301a:	bf00      	nop
 800301c:	3714      	adds	r7, #20
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	40012c00 	.word	0x40012c00
 800302c:	40014000 	.word	0x40014000
 8003030:	40014400 	.word	0x40014400

08003034 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003034:	b480      	push	{r7}
 8003036:	b087      	sub	sp, #28
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	f023 0201 	bic.w	r2, r3, #1
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800305e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	011b      	lsls	r3, r3, #4
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	4313      	orrs	r3, r2
 8003068:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	f023 030a 	bic.w	r3, r3, #10
 8003070:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	4313      	orrs	r3, r2
 8003078:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	621a      	str	r2, [r3, #32]
}
 8003086:	bf00      	nop
 8003088:	371c      	adds	r7, #28
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr

08003092 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003092:	b480      	push	{r7}
 8003094:	b087      	sub	sp, #28
 8003096:	af00      	add	r7, sp, #0
 8003098:	60f8      	str	r0, [r7, #12]
 800309a:	60b9      	str	r1, [r7, #8]
 800309c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	f023 0210 	bic.w	r2, r3, #16
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80030bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	031b      	lsls	r3, r3, #12
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80030ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	011b      	lsls	r3, r3, #4
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	621a      	str	r2, [r3, #32]
}
 80030e6:	bf00      	nop
 80030e8:	371c      	adds	r7, #28
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b085      	sub	sp, #20
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
 80030fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003108:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800310a:	683a      	ldr	r2, [r7, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	4313      	orrs	r3, r2
 8003110:	f043 0307 	orr.w	r3, r3, #7
 8003114:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	609a      	str	r2, [r3, #8]
}
 800311c:	bf00      	nop
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003128:	b480      	push	{r7}
 800312a:	b087      	sub	sp, #28
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
 8003134:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003142:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	021a      	lsls	r2, r3, #8
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	431a      	orrs	r2, r3
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	4313      	orrs	r3, r2
 8003150:	697a      	ldr	r2, [r7, #20]
 8003152:	4313      	orrs	r3, r2
 8003154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	609a      	str	r2, [r3, #8]
}
 800315c:	bf00      	nop
 800315e:	371c      	adds	r7, #28
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003178:	2b01      	cmp	r3, #1
 800317a:	d101      	bne.n	8003180 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800317c:	2302      	movs	r3, #2
 800317e:	e04f      	b.n	8003220 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2202      	movs	r2, #2
 800318c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a21      	ldr	r2, [pc, #132]	@ (800322c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d108      	bne.n	80031bc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80031b0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a14      	ldr	r2, [pc, #80]	@ (800322c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d009      	beq.n	80031f4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031e8:	d004      	beq.n	80031f4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a10      	ldr	r2, [pc, #64]	@ (8003230 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d10c      	bne.n	800320e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	68ba      	ldr	r2, [r7, #8]
 8003202:	4313      	orrs	r3, r2
 8003204:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3714      	adds	r7, #20
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr
 800322c:	40012c00 	.word	0x40012c00
 8003230:	40014000 	.word	0x40014000

08003234 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e040      	b.n	80032c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800324a:	2b00      	cmp	r3, #0
 800324c:	d106      	bne.n	800325c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7fd ff7c 	bl	8001154 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2224      	movs	r2, #36	@ 0x24
 8003260:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 0201 	bic.w	r2, r2, #1
 8003270:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003276:	2b00      	cmp	r3, #0
 8003278:	d002      	beq.n	8003280 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 fa54 	bl	8003728 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 f825 	bl	80032d0 <UART_SetConfig>
 8003286:	4603      	mov	r3, r0
 8003288:	2b01      	cmp	r3, #1
 800328a:	d101      	bne.n	8003290 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e01b      	b.n	80032c8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800329e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689a      	ldr	r2, [r3, #8]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80032ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0201 	orr.w	r2, r2, #1
 80032be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 fad3 	bl	800386c <UART_CheckIdleState>
 80032c6:	4603      	mov	r3, r0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032d4:	b08a      	sub	sp, #40	@ 0x28
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80032da:	2300      	movs	r3, #0
 80032dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	431a      	orrs	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	431a      	orrs	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	69db      	ldr	r3, [r3, #28]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	4bb4      	ldr	r3, [pc, #720]	@ (80035d0 <UART_SetConfig+0x300>)
 8003300:	4013      	ands	r3, r2
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	6812      	ldr	r2, [r2, #0]
 8003306:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003308:	430b      	orrs	r3, r1
 800330a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	68da      	ldr	r2, [r3, #12]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	430a      	orrs	r2, r1
 8003320:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4aa9      	ldr	r2, [pc, #676]	@ (80035d4 <UART_SetConfig+0x304>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d004      	beq.n	800333c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003338:	4313      	orrs	r3, r2
 800333a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800334c:	430a      	orrs	r2, r1
 800334e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4aa0      	ldr	r2, [pc, #640]	@ (80035d8 <UART_SetConfig+0x308>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d126      	bne.n	80033a8 <UART_SetConfig+0xd8>
 800335a:	4ba0      	ldr	r3, [pc, #640]	@ (80035dc <UART_SetConfig+0x30c>)
 800335c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003360:	f003 0303 	and.w	r3, r3, #3
 8003364:	2b03      	cmp	r3, #3
 8003366:	d81b      	bhi.n	80033a0 <UART_SetConfig+0xd0>
 8003368:	a201      	add	r2, pc, #4	@ (adr r2, 8003370 <UART_SetConfig+0xa0>)
 800336a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336e:	bf00      	nop
 8003370:	08003381 	.word	0x08003381
 8003374:	08003391 	.word	0x08003391
 8003378:	08003389 	.word	0x08003389
 800337c:	08003399 	.word	0x08003399
 8003380:	2301      	movs	r3, #1
 8003382:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003386:	e080      	b.n	800348a <UART_SetConfig+0x1ba>
 8003388:	2302      	movs	r3, #2
 800338a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800338e:	e07c      	b.n	800348a <UART_SetConfig+0x1ba>
 8003390:	2304      	movs	r3, #4
 8003392:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003396:	e078      	b.n	800348a <UART_SetConfig+0x1ba>
 8003398:	2308      	movs	r3, #8
 800339a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800339e:	e074      	b.n	800348a <UART_SetConfig+0x1ba>
 80033a0:	2310      	movs	r3, #16
 80033a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033a6:	e070      	b.n	800348a <UART_SetConfig+0x1ba>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a8c      	ldr	r2, [pc, #560]	@ (80035e0 <UART_SetConfig+0x310>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d138      	bne.n	8003424 <UART_SetConfig+0x154>
 80033b2:	4b8a      	ldr	r3, [pc, #552]	@ (80035dc <UART_SetConfig+0x30c>)
 80033b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033b8:	f003 030c 	and.w	r3, r3, #12
 80033bc:	2b0c      	cmp	r3, #12
 80033be:	d82d      	bhi.n	800341c <UART_SetConfig+0x14c>
 80033c0:	a201      	add	r2, pc, #4	@ (adr r2, 80033c8 <UART_SetConfig+0xf8>)
 80033c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c6:	bf00      	nop
 80033c8:	080033fd 	.word	0x080033fd
 80033cc:	0800341d 	.word	0x0800341d
 80033d0:	0800341d 	.word	0x0800341d
 80033d4:	0800341d 	.word	0x0800341d
 80033d8:	0800340d 	.word	0x0800340d
 80033dc:	0800341d 	.word	0x0800341d
 80033e0:	0800341d 	.word	0x0800341d
 80033e4:	0800341d 	.word	0x0800341d
 80033e8:	08003405 	.word	0x08003405
 80033ec:	0800341d 	.word	0x0800341d
 80033f0:	0800341d 	.word	0x0800341d
 80033f4:	0800341d 	.word	0x0800341d
 80033f8:	08003415 	.word	0x08003415
 80033fc:	2300      	movs	r3, #0
 80033fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003402:	e042      	b.n	800348a <UART_SetConfig+0x1ba>
 8003404:	2302      	movs	r3, #2
 8003406:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800340a:	e03e      	b.n	800348a <UART_SetConfig+0x1ba>
 800340c:	2304      	movs	r3, #4
 800340e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003412:	e03a      	b.n	800348a <UART_SetConfig+0x1ba>
 8003414:	2308      	movs	r3, #8
 8003416:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800341a:	e036      	b.n	800348a <UART_SetConfig+0x1ba>
 800341c:	2310      	movs	r3, #16
 800341e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003422:	e032      	b.n	800348a <UART_SetConfig+0x1ba>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a6a      	ldr	r2, [pc, #424]	@ (80035d4 <UART_SetConfig+0x304>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d12a      	bne.n	8003484 <UART_SetConfig+0x1b4>
 800342e:	4b6b      	ldr	r3, [pc, #428]	@ (80035dc <UART_SetConfig+0x30c>)
 8003430:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003434:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003438:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800343c:	d01a      	beq.n	8003474 <UART_SetConfig+0x1a4>
 800343e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003442:	d81b      	bhi.n	800347c <UART_SetConfig+0x1ac>
 8003444:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003448:	d00c      	beq.n	8003464 <UART_SetConfig+0x194>
 800344a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800344e:	d815      	bhi.n	800347c <UART_SetConfig+0x1ac>
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <UART_SetConfig+0x18c>
 8003454:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003458:	d008      	beq.n	800346c <UART_SetConfig+0x19c>
 800345a:	e00f      	b.n	800347c <UART_SetConfig+0x1ac>
 800345c:	2300      	movs	r3, #0
 800345e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003462:	e012      	b.n	800348a <UART_SetConfig+0x1ba>
 8003464:	2302      	movs	r3, #2
 8003466:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800346a:	e00e      	b.n	800348a <UART_SetConfig+0x1ba>
 800346c:	2304      	movs	r3, #4
 800346e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003472:	e00a      	b.n	800348a <UART_SetConfig+0x1ba>
 8003474:	2308      	movs	r3, #8
 8003476:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800347a:	e006      	b.n	800348a <UART_SetConfig+0x1ba>
 800347c:	2310      	movs	r3, #16
 800347e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003482:	e002      	b.n	800348a <UART_SetConfig+0x1ba>
 8003484:	2310      	movs	r3, #16
 8003486:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a51      	ldr	r2, [pc, #324]	@ (80035d4 <UART_SetConfig+0x304>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d17a      	bne.n	800358a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003494:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003498:	2b08      	cmp	r3, #8
 800349a:	d824      	bhi.n	80034e6 <UART_SetConfig+0x216>
 800349c:	a201      	add	r2, pc, #4	@ (adr r2, 80034a4 <UART_SetConfig+0x1d4>)
 800349e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a2:	bf00      	nop
 80034a4:	080034c9 	.word	0x080034c9
 80034a8:	080034e7 	.word	0x080034e7
 80034ac:	080034d1 	.word	0x080034d1
 80034b0:	080034e7 	.word	0x080034e7
 80034b4:	080034d7 	.word	0x080034d7
 80034b8:	080034e7 	.word	0x080034e7
 80034bc:	080034e7 	.word	0x080034e7
 80034c0:	080034e7 	.word	0x080034e7
 80034c4:	080034df 	.word	0x080034df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034c8:	f7ff f852 	bl	8002570 <HAL_RCC_GetPCLK1Freq>
 80034cc:	61f8      	str	r0, [r7, #28]
        break;
 80034ce:	e010      	b.n	80034f2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034d0:	4b44      	ldr	r3, [pc, #272]	@ (80035e4 <UART_SetConfig+0x314>)
 80034d2:	61fb      	str	r3, [r7, #28]
        break;
 80034d4:	e00d      	b.n	80034f2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034d6:	f7fe ffb3 	bl	8002440 <HAL_RCC_GetSysClockFreq>
 80034da:	61f8      	str	r0, [r7, #28]
        break;
 80034dc:	e009      	b.n	80034f2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034e2:	61fb      	str	r3, [r7, #28]
        break;
 80034e4:	e005      	b.n	80034f2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80034e6:	2300      	movs	r3, #0
 80034e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80034f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 8107 	beq.w	8003708 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	4613      	mov	r3, r2
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	4413      	add	r3, r2
 8003504:	69fa      	ldr	r2, [r7, #28]
 8003506:	429a      	cmp	r2, r3
 8003508:	d305      	bcc.n	8003516 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003510:	69fa      	ldr	r2, [r7, #28]
 8003512:	429a      	cmp	r2, r3
 8003514:	d903      	bls.n	800351e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800351c:	e0f4      	b.n	8003708 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	2200      	movs	r2, #0
 8003522:	461c      	mov	r4, r3
 8003524:	4615      	mov	r5, r2
 8003526:	f04f 0200 	mov.w	r2, #0
 800352a:	f04f 0300 	mov.w	r3, #0
 800352e:	022b      	lsls	r3, r5, #8
 8003530:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003534:	0222      	lsls	r2, r4, #8
 8003536:	68f9      	ldr	r1, [r7, #12]
 8003538:	6849      	ldr	r1, [r1, #4]
 800353a:	0849      	lsrs	r1, r1, #1
 800353c:	2000      	movs	r0, #0
 800353e:	4688      	mov	r8, r1
 8003540:	4681      	mov	r9, r0
 8003542:	eb12 0a08 	adds.w	sl, r2, r8
 8003546:	eb43 0b09 	adc.w	fp, r3, r9
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	603b      	str	r3, [r7, #0]
 8003552:	607a      	str	r2, [r7, #4]
 8003554:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003558:	4650      	mov	r0, sl
 800355a:	4659      	mov	r1, fp
 800355c:	f7fd fa26 	bl	80009ac <__aeabi_uldivmod>
 8003560:	4602      	mov	r2, r0
 8003562:	460b      	mov	r3, r1
 8003564:	4613      	mov	r3, r2
 8003566:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800356e:	d308      	bcc.n	8003582 <UART_SetConfig+0x2b2>
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003576:	d204      	bcs.n	8003582 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	60da      	str	r2, [r3, #12]
 8003580:	e0c2      	b.n	8003708 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003588:	e0be      	b.n	8003708 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003592:	d16a      	bne.n	800366a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003594:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003598:	2b08      	cmp	r3, #8
 800359a:	d834      	bhi.n	8003606 <UART_SetConfig+0x336>
 800359c:	a201      	add	r2, pc, #4	@ (adr r2, 80035a4 <UART_SetConfig+0x2d4>)
 800359e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a2:	bf00      	nop
 80035a4:	080035c9 	.word	0x080035c9
 80035a8:	080035e9 	.word	0x080035e9
 80035ac:	080035f1 	.word	0x080035f1
 80035b0:	08003607 	.word	0x08003607
 80035b4:	080035f7 	.word	0x080035f7
 80035b8:	08003607 	.word	0x08003607
 80035bc:	08003607 	.word	0x08003607
 80035c0:	08003607 	.word	0x08003607
 80035c4:	080035ff 	.word	0x080035ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035c8:	f7fe ffd2 	bl	8002570 <HAL_RCC_GetPCLK1Freq>
 80035cc:	61f8      	str	r0, [r7, #28]
        break;
 80035ce:	e020      	b.n	8003612 <UART_SetConfig+0x342>
 80035d0:	efff69f3 	.word	0xefff69f3
 80035d4:	40008000 	.word	0x40008000
 80035d8:	40013800 	.word	0x40013800
 80035dc:	40021000 	.word	0x40021000
 80035e0:	40004400 	.word	0x40004400
 80035e4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035e8:	f7fe ffd8 	bl	800259c <HAL_RCC_GetPCLK2Freq>
 80035ec:	61f8      	str	r0, [r7, #28]
        break;
 80035ee:	e010      	b.n	8003612 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035f0:	4b4c      	ldr	r3, [pc, #304]	@ (8003724 <UART_SetConfig+0x454>)
 80035f2:	61fb      	str	r3, [r7, #28]
        break;
 80035f4:	e00d      	b.n	8003612 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035f6:	f7fe ff23 	bl	8002440 <HAL_RCC_GetSysClockFreq>
 80035fa:	61f8      	str	r0, [r7, #28]
        break;
 80035fc:	e009      	b.n	8003612 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003602:	61fb      	str	r3, [r7, #28]
        break;
 8003604:	e005      	b.n	8003612 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003606:	2300      	movs	r3, #0
 8003608:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003610:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d077      	beq.n	8003708 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	005a      	lsls	r2, r3, #1
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	085b      	lsrs	r3, r3, #1
 8003622:	441a      	add	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	fbb2 f3f3 	udiv	r3, r2, r3
 800362c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	2b0f      	cmp	r3, #15
 8003632:	d916      	bls.n	8003662 <UART_SetConfig+0x392>
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800363a:	d212      	bcs.n	8003662 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	b29b      	uxth	r3, r3
 8003640:	f023 030f 	bic.w	r3, r3, #15
 8003644:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	085b      	lsrs	r3, r3, #1
 800364a:	b29b      	uxth	r3, r3
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	b29a      	uxth	r2, r3
 8003652:	8afb      	ldrh	r3, [r7, #22]
 8003654:	4313      	orrs	r3, r2
 8003656:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	8afa      	ldrh	r2, [r7, #22]
 800365e:	60da      	str	r2, [r3, #12]
 8003660:	e052      	b.n	8003708 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003668:	e04e      	b.n	8003708 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800366a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800366e:	2b08      	cmp	r3, #8
 8003670:	d827      	bhi.n	80036c2 <UART_SetConfig+0x3f2>
 8003672:	a201      	add	r2, pc, #4	@ (adr r2, 8003678 <UART_SetConfig+0x3a8>)
 8003674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003678:	0800369d 	.word	0x0800369d
 800367c:	080036a5 	.word	0x080036a5
 8003680:	080036ad 	.word	0x080036ad
 8003684:	080036c3 	.word	0x080036c3
 8003688:	080036b3 	.word	0x080036b3
 800368c:	080036c3 	.word	0x080036c3
 8003690:	080036c3 	.word	0x080036c3
 8003694:	080036c3 	.word	0x080036c3
 8003698:	080036bb 	.word	0x080036bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800369c:	f7fe ff68 	bl	8002570 <HAL_RCC_GetPCLK1Freq>
 80036a0:	61f8      	str	r0, [r7, #28]
        break;
 80036a2:	e014      	b.n	80036ce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036a4:	f7fe ff7a 	bl	800259c <HAL_RCC_GetPCLK2Freq>
 80036a8:	61f8      	str	r0, [r7, #28]
        break;
 80036aa:	e010      	b.n	80036ce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036ac:	4b1d      	ldr	r3, [pc, #116]	@ (8003724 <UART_SetConfig+0x454>)
 80036ae:	61fb      	str	r3, [r7, #28]
        break;
 80036b0:	e00d      	b.n	80036ce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036b2:	f7fe fec5 	bl	8002440 <HAL_RCC_GetSysClockFreq>
 80036b6:	61f8      	str	r0, [r7, #28]
        break;
 80036b8:	e009      	b.n	80036ce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036be:	61fb      	str	r3, [r7, #28]
        break;
 80036c0:	e005      	b.n	80036ce <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80036c2:	2300      	movs	r3, #0
 80036c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80036cc:	bf00      	nop
    }

    if (pclk != 0U)
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d019      	beq.n	8003708 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	085a      	lsrs	r2, r3, #1
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	441a      	add	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	2b0f      	cmp	r3, #15
 80036ec:	d909      	bls.n	8003702 <UART_SetConfig+0x432>
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036f4:	d205      	bcs.n	8003702 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	60da      	str	r2, [r3, #12]
 8003700:	e002      	b.n	8003708 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003714:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003718:	4618      	mov	r0, r3
 800371a:	3728      	adds	r7, #40	@ 0x28
 800371c:	46bd      	mov	sp, r7
 800371e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003722:	bf00      	nop
 8003724:	00f42400 	.word	0x00f42400

08003728 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003734:	f003 0308 	and.w	r3, r3, #8
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00a      	beq.n	8003752 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00a      	beq.n	8003774 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00a      	beq.n	8003796 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379a:	f003 0304 	and.w	r3, r3, #4
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00a      	beq.n	80037b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	430a      	orrs	r2, r1
 80037b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037bc:	f003 0310 	and.w	r3, r3, #16
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00a      	beq.n	80037da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037de:	f003 0320 	and.w	r3, r3, #32
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00a      	beq.n	80037fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003804:	2b00      	cmp	r3, #0
 8003806:	d01a      	beq.n	800383e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003822:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003826:	d10a      	bne.n	800383e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	430a      	orrs	r2, r1
 800383c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00a      	beq.n	8003860 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	430a      	orrs	r2, r1
 800385e:	605a      	str	r2, [r3, #4]
  }
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b098      	sub	sp, #96	@ 0x60
 8003870:	af02      	add	r7, sp, #8
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800387c:	f7fd fda8 	bl	80013d0 <HAL_GetTick>
 8003880:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0308 	and.w	r3, r3, #8
 800388c:	2b08      	cmp	r3, #8
 800388e:	d12e      	bne.n	80038ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003890:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003898:	2200      	movs	r2, #0
 800389a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f88c 	bl	80039bc <UART_WaitOnFlagUntilTimeout>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d021      	beq.n	80038ee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038b2:	e853 3f00 	ldrex	r3, [r3]
 80038b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80038b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038be:	653b      	str	r3, [r7, #80]	@ 0x50
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	461a      	mov	r2, r3
 80038c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80038ca:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80038ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80038d0:	e841 2300 	strex	r3, r2, [r1]
 80038d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80038d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1e6      	bne.n	80038aa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2220      	movs	r2, #32
 80038e0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e062      	b.n	80039b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0304 	and.w	r3, r3, #4
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	d149      	bne.n	8003990 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003904:	2200      	movs	r2, #0
 8003906:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f856 	bl	80039bc <UART_WaitOnFlagUntilTimeout>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d03c      	beq.n	8003990 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391e:	e853 3f00 	ldrex	r3, [r3]
 8003922:	623b      	str	r3, [r7, #32]
   return(result);
 8003924:	6a3b      	ldr	r3, [r7, #32]
 8003926:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800392a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	461a      	mov	r2, r3
 8003932:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003934:	633b      	str	r3, [r7, #48]	@ 0x30
 8003936:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003938:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800393a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800393c:	e841 2300 	strex	r3, r2, [r1]
 8003940:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1e6      	bne.n	8003916 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	3308      	adds	r3, #8
 800394e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	e853 3f00 	ldrex	r3, [r3]
 8003956:	60fb      	str	r3, [r7, #12]
   return(result);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f023 0301 	bic.w	r3, r3, #1
 800395e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	3308      	adds	r3, #8
 8003966:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003968:	61fa      	str	r2, [r7, #28]
 800396a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396c:	69b9      	ldr	r1, [r7, #24]
 800396e:	69fa      	ldr	r2, [r7, #28]
 8003970:	e841 2300 	strex	r3, r2, [r1]
 8003974:	617b      	str	r3, [r7, #20]
   return(result);
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1e5      	bne.n	8003948 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2220      	movs	r2, #32
 8003980:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e011      	b.n	80039b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2220      	movs	r2, #32
 8003994:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2220      	movs	r2, #32
 800399a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3758      	adds	r7, #88	@ 0x58
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	603b      	str	r3, [r7, #0]
 80039c8:	4613      	mov	r3, r2
 80039ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039cc:	e04f      	b.n	8003a6e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d4:	d04b      	beq.n	8003a6e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039d6:	f7fd fcfb 	bl	80013d0 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d302      	bcc.n	80039ec <UART_WaitOnFlagUntilTimeout+0x30>
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d101      	bne.n	80039f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e04e      	b.n	8003a8e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0304 	and.w	r3, r3, #4
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d037      	beq.n	8003a6e <UART_WaitOnFlagUntilTimeout+0xb2>
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	2b80      	cmp	r3, #128	@ 0x80
 8003a02:	d034      	beq.n	8003a6e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	2b40      	cmp	r3, #64	@ 0x40
 8003a08:	d031      	beq.n	8003a6e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	69db      	ldr	r3, [r3, #28]
 8003a10:	f003 0308 	and.w	r3, r3, #8
 8003a14:	2b08      	cmp	r3, #8
 8003a16:	d110      	bne.n	8003a3a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2208      	movs	r2, #8
 8003a1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f000 f838 	bl	8003a96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2208      	movs	r2, #8
 8003a2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e029      	b.n	8003a8e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	69db      	ldr	r3, [r3, #28]
 8003a40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a48:	d111      	bne.n	8003a6e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003a52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f000 f81e 	bl	8003a96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e00f      	b.n	8003a8e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	69da      	ldr	r2, [r3, #28]
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	4013      	ands	r3, r2
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	bf0c      	ite	eq
 8003a7e:	2301      	moveq	r3, #1
 8003a80:	2300      	movne	r3, #0
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	461a      	mov	r2, r3
 8003a86:	79fb      	ldrb	r3, [r7, #7]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d0a0      	beq.n	80039ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b095      	sub	sp, #84	@ 0x54
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aa6:	e853 3f00 	ldrex	r3, [r3]
 8003aaa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	461a      	mov	r2, r3
 8003aba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003abc:	643b      	str	r3, [r7, #64]	@ 0x40
 8003abe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ac2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ac4:	e841 2300 	strex	r3, r2, [r1]
 8003ac8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1e6      	bne.n	8003a9e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	3308      	adds	r3, #8
 8003ad6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad8:	6a3b      	ldr	r3, [r7, #32]
 8003ada:	e853 3f00 	ldrex	r3, [r3]
 8003ade:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	f023 0301 	bic.w	r3, r3, #1
 8003ae6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	3308      	adds	r3, #8
 8003aee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003af0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003af2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003af6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003af8:	e841 2300 	strex	r3, r2, [r1]
 8003afc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1e5      	bne.n	8003ad0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d118      	bne.n	8003b3e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	e853 3f00 	ldrex	r3, [r3]
 8003b18:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	f023 0310 	bic.w	r3, r3, #16
 8003b20:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	461a      	mov	r2, r3
 8003b28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b2a:	61bb      	str	r3, [r7, #24]
 8003b2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2e:	6979      	ldr	r1, [r7, #20]
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	e841 2300 	strex	r3, r2, [r1]
 8003b36:	613b      	str	r3, [r7, #16]
   return(result);
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1e6      	bne.n	8003b0c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2220      	movs	r2, #32
 8003b42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003b52:	bf00      	nop
 8003b54:	3754      	adds	r7, #84	@ 0x54
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <memset>:
 8003b5e:	4402      	add	r2, r0
 8003b60:	4603      	mov	r3, r0
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d100      	bne.n	8003b68 <memset+0xa>
 8003b66:	4770      	bx	lr
 8003b68:	f803 1b01 	strb.w	r1, [r3], #1
 8003b6c:	e7f9      	b.n	8003b62 <memset+0x4>
	...

08003b70 <__libc_init_array>:
 8003b70:	b570      	push	{r4, r5, r6, lr}
 8003b72:	4d0d      	ldr	r5, [pc, #52]	@ (8003ba8 <__libc_init_array+0x38>)
 8003b74:	4c0d      	ldr	r4, [pc, #52]	@ (8003bac <__libc_init_array+0x3c>)
 8003b76:	1b64      	subs	r4, r4, r5
 8003b78:	10a4      	asrs	r4, r4, #2
 8003b7a:	2600      	movs	r6, #0
 8003b7c:	42a6      	cmp	r6, r4
 8003b7e:	d109      	bne.n	8003b94 <__libc_init_array+0x24>
 8003b80:	4d0b      	ldr	r5, [pc, #44]	@ (8003bb0 <__libc_init_array+0x40>)
 8003b82:	4c0c      	ldr	r4, [pc, #48]	@ (8003bb4 <__libc_init_array+0x44>)
 8003b84:	f000 f818 	bl	8003bb8 <_init>
 8003b88:	1b64      	subs	r4, r4, r5
 8003b8a:	10a4      	asrs	r4, r4, #2
 8003b8c:	2600      	movs	r6, #0
 8003b8e:	42a6      	cmp	r6, r4
 8003b90:	d105      	bne.n	8003b9e <__libc_init_array+0x2e>
 8003b92:	bd70      	pop	{r4, r5, r6, pc}
 8003b94:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b98:	4798      	blx	r3
 8003b9a:	3601      	adds	r6, #1
 8003b9c:	e7ee      	b.n	8003b7c <__libc_init_array+0xc>
 8003b9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ba2:	4798      	blx	r3
 8003ba4:	3601      	adds	r6, #1
 8003ba6:	e7f2      	b.n	8003b8e <__libc_init_array+0x1e>
 8003ba8:	08003c20 	.word	0x08003c20
 8003bac:	08003c20 	.word	0x08003c20
 8003bb0:	08003c20 	.word	0x08003c20
 8003bb4:	08003c24 	.word	0x08003c24

08003bb8 <_init>:
 8003bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bba:	bf00      	nop
 8003bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bbe:	bc08      	pop	{r3}
 8003bc0:	469e      	mov	lr, r3
 8003bc2:	4770      	bx	lr

08003bc4 <_fini>:
 8003bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bc6:	bf00      	nop
 8003bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bca:	bc08      	pop	{r3}
 8003bcc:	469e      	mov	lr, r3
 8003bce:	4770      	bx	lr
